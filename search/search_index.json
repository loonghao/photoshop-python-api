{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[![All Contributors](https://img.shields.io/badge/all_contributors-16-orange.svg?style=flat-square)](..#contributors-) Python API for Photoshop. The example above was created with Photoshop Python API. Check it out at https://loonghao.github.io/photoshop-python-api/examples . Has been tested and used Photoshop version: Photoshop Version Supported 2022 \u2705 2021 \u2705 2020 \u2705 cc2019 \u2705 cc2018 \u2705 cc2017 \u2705 Installing You can install via pip. pip install photoshop_python_api Since it uses COM (Component Object Model) connect Photoshop, it can be used in any DCC software with a python interpreter. Hello World import photoshop.api as ps app = ps . Application () doc = app . documents . add () new_doc = doc . artLayers . add () text_color = ps . SolidColor () text_color . rgb . red = 0 text_color . rgb . green = 255 text_color . rgb . blue = 0 new_text_layer = new_doc new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) # # save to jpg jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Photoshop Session Use it as context. from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Contributors \u2728 Thanks goes to these wonderful people ( emoji key ): Hal \ud83d\udcbb voodraizer \ud83d\udc1b brunosly \ud83d\udc1b tubi \ud83d\udc1b wjxiehaixin \ud83d\udc1b \u7f57\u9a6c\u949f \ud83d\udc1b clement \ud83d\udc1b krevlinmen \ud83d\udc1b Thomas \ud83d\udc1b CaptainCsaba \ud83d\udc1b Il Harper \ud83d\udcbb blunderedbishop \ud83d\udc1b MrTeferi \ud83d\udcbb Damien Chambe \ud83d\udcbb Ehsan Akbari Tabar \ud83d\udc1b Michael Ikemann \ud83d\udc1b This project follows the all-contributors specification. Contributions of any kind are welcome! Repobeats analytics how to get Photoshop program ID PS> Get-ChildItem \"HKLM:\\SOFTWARE\\Classes\" | ?{ ($_.PSChildName -match \"^[a-z]+\\.[a-z]+(\\.\\d+)?$\") -and ($_.GetSubKeyNames() -contains \"CLSID\") } | ?{ $_.PSChildName -match \"Photoshop.Application\" } | ft PSChildName How to get a list of COM objects from the registry Useful links https://theiviaxx.github.io/photoshop-docs/Photoshop/ http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/photoshop/pdfs/photoshop-cc-javascript-ref-2015.pdf https://github.com/lohriialo/photoshop-scripting-python https://www.adobe.com/devnet/photoshop/scripting.html https://www.youtube.com/playlist?list=PLUEniN8BpU8-Qmjyv3zyWaNvDYwJOJZ4m http://yearbook.github.io/esdocs/#/Photoshop/Application http://www.shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://www.tonton-pixel.com/wp-content/uploads/DecisionTable.pdf http://jongware.mit.edu/pscs5js_html/psjscs5/pc_Application.html https://indd.adobe.com/view/a0207571-ff5b-4bbf-a540-07079bd21d75 http://shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://web.archive.org/web/20140121053819/http://www.pcpix.com/Photoshop/char.html http://www.tonton-pixel.com/scripts/utility-scripts/get-equivalent-id-code/index.html https://github.com/Adobe-CEP/Samples/tree/master/PhotoshopEvents https://evanmccall.wordpress.com/2015/03/09/how-to-develop-photoshop-tools-in-python","title":"Overview"},{"location":"#installing","text":"You can install via pip. pip install photoshop_python_api Since it uses COM (Component Object Model) connect Photoshop, it can be used in any DCC software with a python interpreter.","title":"Installing"},{"location":"#hello-world","text":"import photoshop.api as ps app = ps . Application () doc = app . documents . add () new_doc = doc . artLayers . add () text_color = ps . SolidColor () text_color . rgb . red = 0 text_color . rgb . green = 255 text_color . rgb . blue = 0 new_text_layer = new_doc new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) # # save to jpg jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"Hello World"},{"location":"#photoshop-session","text":"Use it as context. from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"Photoshop Session"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Hal \ud83d\udcbb voodraizer \ud83d\udc1b brunosly \ud83d\udc1b tubi \ud83d\udc1b wjxiehaixin \ud83d\udc1b \u7f57\u9a6c\u949f \ud83d\udc1b clement \ud83d\udc1b krevlinmen \ud83d\udc1b Thomas \ud83d\udc1b CaptainCsaba \ud83d\udc1b Il Harper \ud83d\udcbb blunderedbishop \ud83d\udc1b MrTeferi \ud83d\udcbb Damien Chambe \ud83d\udcbb Ehsan Akbari Tabar \ud83d\udc1b Michael Ikemann \ud83d\udc1b This project follows the all-contributors specification. Contributions of any kind are welcome!","title":"Contributors \u2728"},{"location":"#repobeats-analytics","text":"","title":"Repobeats analytics"},{"location":"#how-to-get-photoshop-program-id","text":"PS> Get-ChildItem \"HKLM:\\SOFTWARE\\Classes\" | ?{ ($_.PSChildName -match \"^[a-z]+\\.[a-z]+(\\.\\d+)?$\") -and ($_.GetSubKeyNames() -contains \"CLSID\") } | ?{ $_.PSChildName -match \"Photoshop.Application\" } | ft PSChildName How to get a list of COM objects from the registry","title":"how to get Photoshop program ID"},{"location":"#useful-links","text":"https://theiviaxx.github.io/photoshop-docs/Photoshop/ http://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/photoshop/pdfs/photoshop-cc-javascript-ref-2015.pdf https://github.com/lohriialo/photoshop-scripting-python https://www.adobe.com/devnet/photoshop/scripting.html https://www.youtube.com/playlist?list=PLUEniN8BpU8-Qmjyv3zyWaNvDYwJOJZ4m http://yearbook.github.io/esdocs/#/Photoshop/Application http://www.shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://www.tonton-pixel.com/wp-content/uploads/DecisionTable.pdf http://jongware.mit.edu/pscs5js_html/psjscs5/pc_Application.html https://indd.adobe.com/view/a0207571-ff5b-4bbf-a540-07079bd21d75 http://shining-lucy.com/wiki/page.php?id=appwiki:photoshop:ps_script http://web.archive.org/web/20140121053819/http://www.pcpix.com/Photoshop/char.html http://www.tonton-pixel.com/scripts/utility-scripts/get-equivalent-id-code/index.html https://github.com/Adobe-CEP/Samples/tree/master/PhotoshopEvents https://evanmccall.wordpress.com/2015/03/09/how-to-develop-photoshop-tools-in-python","title":"Useful links"},{"location":"changelog/","text":"v0.20.1 (2022-11-28) Refactor action_descriptor : Fix type hints for doubles v0.20.0 (2022-11-26) Feat add a new option for create batch v0.19.7 (2022-11-14) Fix deps : update dependency wheel to ^0.38.0 v0.19.6 (2022-11-06) Refactor update constants for support Photoshop 2022 v0.19.5 (2022-07-17) Refactor application : add a default value of action v0.19.4 (2022-07-10) Fix get document by document name from documents. v0.19.3 (2022-06-17) Fix fix import EPSSaveOptions v0.19.2 (2022-06-14) Refactor session.py : add EPS save options v0.19.1 (2022-05-29) Fix document : export document png : exported PNG image is too large v0.19.0 (2022-05-20) Fix ArtLayer,-LayerSet : adjusted linkedLayers property, fixed remove() Feat ArtLayer : added linkedLayers and opacity, fixed unlink v0.18.1 (2022-04-17) Refactor ActionList : Added ActionList to init and Session to make ActionList callable from Application or Session object v0.18.0 (2022-04-04) Fix fix export document Feat add new function to convert as javascript v0.17.7 (2022-03-20) Fix deps : update dependency wheel to ^0.37.0 v0.17.6 (2022-03-19) Refactor improve type hints Fix add ArtLayer instance return when duplicate layer v0.17.5 (2022-03-13) Fix update ci config and re-tag v0.17.4 (2022-03-13) Perf add more docstrings v0.17.3 (2022-03-13) Perf add more docstrings v0.17.2 (2022-03-13) Perf improve docs Fix retag and update ci Refactor improve getByName from artLayers and layers v0.17.1 (2022-03-12) Refactor improve docs v0.17.0 (2021-09-21) Feat Update the logic of searching the installation path of Photoshop through the registration v0.16.3 (2021-09-12) Fix add 2021 to version mappings v0.16.2 (2021-08-15) Fix api/text_item.py : missing width.setter for paragraphtext in text_item.py v0.16.1 (2021-07-04) Fix fix install failed in python-3.9 v0.16.0 (2021-05-29) Feat documents : support get document by index v0.15.2 (2021-05-29) Refactor use absolute path imports use absolute path imports 0.15.1 (2021-02-03) 0.15.0 (2021-01-10) 0.14.0 (2020-10-22) 0.13.0 (2020-09-23) 0.12.1 (2020-09-13) 0.12.0 (2020-05-10) 0.11.0 (2020-05-07) 0.10.0 (2020-04-22) 0.9.0 (2020-04-09) 0.8.0 (2020-04-08) 0.7.2 (2020-04-01) 0.3.0 (2020-02-24) 0.2.1 (2020-02-17)","title":"Changelog"},{"location":"changelog/#v0201-2022-11-28","text":"","title":"v0.20.1 (2022-11-28)"},{"location":"changelog/#refactor","text":"action_descriptor : Fix type hints for doubles","title":"Refactor"},{"location":"changelog/#v0200-2022-11-26","text":"","title":"v0.20.0 (2022-11-26)"},{"location":"changelog/#feat","text":"add a new option for create batch","title":"Feat"},{"location":"changelog/#v0197-2022-11-14","text":"","title":"v0.19.7 (2022-11-14)"},{"location":"changelog/#fix","text":"deps : update dependency wheel to ^0.38.0","title":"Fix"},{"location":"changelog/#v0196-2022-11-06","text":"","title":"v0.19.6 (2022-11-06)"},{"location":"changelog/#refactor_1","text":"update constants for support Photoshop 2022","title":"Refactor"},{"location":"changelog/#v0195-2022-07-17","text":"","title":"v0.19.5 (2022-07-17)"},{"location":"changelog/#refactor_2","text":"application : add a default value of action","title":"Refactor"},{"location":"changelog/#v0194-2022-07-10","text":"","title":"v0.19.4 (2022-07-10)"},{"location":"changelog/#fix_1","text":"get document by document name from documents.","title":"Fix"},{"location":"changelog/#v0193-2022-06-17","text":"","title":"v0.19.3 (2022-06-17)"},{"location":"changelog/#fix_2","text":"fix import EPSSaveOptions","title":"Fix"},{"location":"changelog/#v0192-2022-06-14","text":"","title":"v0.19.2 (2022-06-14)"},{"location":"changelog/#refactor_3","text":"session.py : add EPS save options","title":"Refactor"},{"location":"changelog/#v0191-2022-05-29","text":"","title":"v0.19.1 (2022-05-29)"},{"location":"changelog/#fix_3","text":"document : export document png : exported PNG image is too large","title":"Fix"},{"location":"changelog/#v0190-2022-05-20","text":"","title":"v0.19.0 (2022-05-20)"},{"location":"changelog/#fix_4","text":"ArtLayer,-LayerSet : adjusted linkedLayers property, fixed remove()","title":"Fix"},{"location":"changelog/#feat_1","text":"ArtLayer : added linkedLayers and opacity, fixed unlink","title":"Feat"},{"location":"changelog/#v0181-2022-04-17","text":"","title":"v0.18.1 (2022-04-17)"},{"location":"changelog/#refactor_4","text":"ActionList : Added ActionList to init and Session to make ActionList callable from Application or Session object","title":"Refactor"},{"location":"changelog/#v0180-2022-04-04","text":"","title":"v0.18.0 (2022-04-04)"},{"location":"changelog/#fix_5","text":"fix export document","title":"Fix"},{"location":"changelog/#feat_2","text":"add new function to convert as javascript","title":"Feat"},{"location":"changelog/#v0177-2022-03-20","text":"","title":"v0.17.7 (2022-03-20)"},{"location":"changelog/#fix_6","text":"deps : update dependency wheel to ^0.37.0","title":"Fix"},{"location":"changelog/#v0176-2022-03-19","text":"","title":"v0.17.6 (2022-03-19)"},{"location":"changelog/#refactor_5","text":"improve type hints","title":"Refactor"},{"location":"changelog/#fix_7","text":"add ArtLayer instance return when duplicate layer","title":"Fix"},{"location":"changelog/#v0175-2022-03-13","text":"","title":"v0.17.5 (2022-03-13)"},{"location":"changelog/#fix_8","text":"update ci config and re-tag","title":"Fix"},{"location":"changelog/#v0174-2022-03-13","text":"","title":"v0.17.4 (2022-03-13)"},{"location":"changelog/#perf","text":"add more docstrings","title":"Perf"},{"location":"changelog/#v0173-2022-03-13","text":"","title":"v0.17.3 (2022-03-13)"},{"location":"changelog/#perf_1","text":"add more docstrings","title":"Perf"},{"location":"changelog/#v0172-2022-03-13","text":"","title":"v0.17.2 (2022-03-13)"},{"location":"changelog/#perf_2","text":"improve docs","title":"Perf"},{"location":"changelog/#fix_9","text":"retag and update ci","title":"Fix"},{"location":"changelog/#refactor_6","text":"improve getByName from artLayers and layers","title":"Refactor"},{"location":"changelog/#v0171-2022-03-12","text":"","title":"v0.17.1 (2022-03-12)"},{"location":"changelog/#refactor_7","text":"improve docs","title":"Refactor"},{"location":"changelog/#v0170-2021-09-21","text":"","title":"v0.17.0 (2021-09-21)"},{"location":"changelog/#feat_3","text":"Update the logic of searching the installation path of Photoshop through the registration","title":"Feat"},{"location":"changelog/#v0163-2021-09-12","text":"","title":"v0.16.3 (2021-09-12)"},{"location":"changelog/#fix_10","text":"add 2021 to version mappings","title":"Fix"},{"location":"changelog/#v0162-2021-08-15","text":"","title":"v0.16.2 (2021-08-15)"},{"location":"changelog/#fix_11","text":"api/text_item.py : missing width.setter for paragraphtext in text_item.py","title":"Fix"},{"location":"changelog/#v0161-2021-07-04","text":"","title":"v0.16.1 (2021-07-04)"},{"location":"changelog/#fix_12","text":"fix install failed in python-3.9","title":"Fix"},{"location":"changelog/#v0160-2021-05-29","text":"","title":"v0.16.0 (2021-05-29)"},{"location":"changelog/#feat_4","text":"documents : support get document by index","title":"Feat"},{"location":"changelog/#v0152-2021-05-29","text":"","title":"v0.15.2 (2021-05-29)"},{"location":"changelog/#refactor_8","text":"use absolute path imports use absolute path imports","title":"Refactor"},{"location":"changelog/#0151-2021-02-03","text":"","title":"0.15.1 (2021-02-03)"},{"location":"changelog/#0150-2021-01-10","text":"","title":"0.15.0 (2021-01-10)"},{"location":"changelog/#0140-2020-10-22","text":"","title":"0.14.0 (2020-10-22)"},{"location":"changelog/#0130-2020-09-23","text":"","title":"0.13.0 (2020-09-23)"},{"location":"changelog/#0121-2020-09-13","text":"","title":"0.12.1 (2020-09-13)"},{"location":"changelog/#0120-2020-05-10","text":"","title":"0.12.0 (2020-05-10)"},{"location":"changelog/#0110-2020-05-07","text":"","title":"0.11.0 (2020-05-07)"},{"location":"changelog/#0100-2020-04-22","text":"","title":"0.10.0 (2020-04-22)"},{"location":"changelog/#090-2020-04-09","text":"","title":"0.9.0 (2020-04-09)"},{"location":"changelog/#080-2020-04-08","text":"","title":"0.8.0 (2020-04-08)"},{"location":"changelog/#072-2020-04-01","text":"","title":"0.7.2 (2020-04-01)"},{"location":"changelog/#030-2020-02-24","text":"","title":"0.3.0 (2020-02-24)"},{"location":"changelog/#021-2020-02-17","text":"","title":"0.2.1 (2020-02-17)"},{"location":"examples/","text":"Examples Creating A Layer \"\"\" Let's get the current document and create a new layer \"Background\" and fill it with red color. In order to use the Fill tool we will first select the entire layer and then fill it with a color. \"\"\" # Import local modules from photoshop import Session with Session () as ps : document = ps . active_document # Create color object of color red. fillColor = ps . SolidColor () fillColor . rgb . red = 222 fillColor . rgb . green = 0 fillColor . rgb . blue = 0 # Add a new layer called Background. layer = document . artLayers . add () layer . name = \"Background\" # Select the entire layer. document . selection . selectAll () # Fill the selection with color. document . selection . fill ( fillColor ) # Deselect. document . selection . deselect () Import Image As Layer \"\"\"Import a image as a artLayer.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : desc = ps . ActionDescriptor desc . putPath ( ps . app . charIDToTypeID ( \"null\" ), \"your/image/path\" ) event_id = ps . app . charIDToTypeID ( \"Plc \" ) # `Plc` need one space in here. ps . app . executeAction ( ps . app . charIDToTypeID ( \"Plc \" ), desc ) Emboss Action # Import local modules from photoshop import Session with Session () as ps : app = ps . app for index , x in enumerate ( range ( 50 )): # Execute an existing action from action palette. idPly = app . charIDToTypeID ( \"Ply \" ) desc8 = ps . ActionDescriptor () idnull = app . charIDToTypeID ( \"null\" ) ref3 = ps . ActionReference () idActn = app . charIDToTypeID ( \"Actn\" ) ref3 . putName ( idActn , \"Sepia Toning (layer)\" ) idASet = app . charIDToTypeID ( \"ASet\" ) ref3 . PutName ( idASet , \"Default Actions\" ) desc8 . putReference ( idnull , ref3 ) app . executeAction ( idPly , desc8 , ps . DialogModes . DisplayNoDialogs ) # Create solid color fill layer. idMk = app . charIDToTypeID ( \"Mk \" ) desc21 = ps . ActionDescriptor () idNull = app . charIDToTypeID ( \"null\" ) ref12 = ps . ActionReference () idContentLayer1 = app . stringIDToTypeID ( \"contentLayer\" ) ref12 . putClass ( idContentLayer1 ) desc21 . putReference ( idNull , ref12 ) idUsng = app . charIDToTypeID ( \"Usng\" ) desc22 = ps . ActionDescriptor () idType = app . charIDToTypeID ( \"Type\" ) desc23 = ps . ActionDescriptor () idClr = app . charIDToTypeID ( \"Clr \" ) desc24 = ps . ActionDescriptor () idRd = app . charIDToTypeID ( \"Rd \" ) desc24 . putDouble ( idRd , index ) idGrn = app . charIDToTypeID ( \"Grn \" ) desc24 . putDouble ( idGrn , index ) idBl = app . charIDToTypeID ( \"Bl \" ) desc24 . putDouble ( idBl , index ) idRGBC = app . charIDToTypeID ( \"RGBC\" ) desc23 . putObject ( idClr , idRGBC , desc24 ) idSolidColorLayer = app . StringIDToTypeID ( \"solidColorLayer\" ) desc22 . putObject ( idType , idSolidColorLayer , desc23 ) idContentLayer2 = app . StringIDToTypeID ( \"contentLayer\" ) desc21 . putObject ( idUsng , idContentLayer2 , desc22 ) app . executeAction ( idMk , desc21 , ps . DialogModes . DisplayNoDialogs ) # Select mask. idSlct = app . charIDToTypeID ( \"slct\" ) desc38 = ps . ActionDescriptor () idNull1 = app . charIDToTypeID ( \"null\" ) ref20 = ps . ActionReference () idChnl1 = app . charIDToTypeID ( \"Chnl\" ) idChnl2 = app . charIDToTypeID ( \"Chnl\" ) idMsk = app . charIDToTypeID ( \"Msk \" ) ref20 . putEnumerated ( idChnl1 , idChnl2 , idMsk ) desc38 . putReference ( idNull1 , ref20 ) idMkVs = app . charIDToTypeID ( \"MkVs\" ) desc38 . putBoolean ( idMkVs , False ) app . executeAction ( idSlct , desc38 , ps . DialogModes . DisplayNoDialogs ) app . activeDocument . activeLayer . invert () Active Layer # Set the active layer to the last art layer of the active document, or the # first if the last is already active. # Import local modules from photoshop import Session with Session () as ps : if len ( ps . app . documents ) < 1 : docRef = ps . app . documents . add () else : docRef = ps . app . activeDocument if len ( docRef . layers ) < 2 : docRef . artLayers . add () ps . echo ( docRef . activeLayer . name ) new_layer = docRef . artLayers . add () ps . echo ( new_layer . name ) new_layer . name = \"test\" Open Psd # Import local modules from photoshop import Session import photoshop.api as ps # style 1 app = ps . Application () app . load ( \"your/psd/or/psb/file_path.psd\" ) # style 2 with Session ( \"your/psd/or/psb/file_path.psd\" , action = \"open\" ) as ps : ps . echo ( ps . active_document . name ) Enable Generator \"\"\"Enable Generator features.\"\"\" # Import local modules from photoshop import Session with Session () as ps : plugin_name = \"generator-assets-dummy-menu\" generatorDesc = ps . ActionDescriptor generatorDesc . putString ( ps . app . stringIDToTypeID ( \"name\" ), plugin_name ) ps . app . executeAction ( ps . app . stringIDToTypeID ( \"generateAssets\" ), generatorDesc ) Add Start Application Event \"\"\"Add event for Photoshop start application. In the current example, every time we start photoshop it will alert \"Start Application Event\". Just like you manually in Script> Script Events Manager to enable the event. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : root = mkdtemp () jsx_file = os . path . join ( root , \"event.jsx\" ) with open ( jsx_file , \"w\" ) as f : f . write ( 'alert(\"Start Application event.\")' ) ps . app . notifiers . add ( ps . EventID . Notify , jsx_file ) print ( \"Add event done.\" ) Selection Stroke \"\"\"Create a stroke around the current selection, Set the stroke color and width of the new stroke. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SelectionStroke.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( list (( i , x ) for i , x in enumerate ( app . documents , 1 ))) > 0 : if not app . activeDocument . activeLayer . isBackgroundLayer : psPixels = 1 start_ruler_units = app . Preferences . RulerUnits app . preferences . rulerUnits = ps . Units . Pixels selRef = app . activeDocument . selection offset = 10 selBounds = ( ( offset , offset ), ( app . activeDocument . width - offset , offset ), ( app . activeDocument . width - offset , app . activeDocument . height - offset ), ( offset , app . activeDocument . height - offset ), ) selRef . select ( selBounds ) selRef . selectBorder ( 5 ) # create text color properties strokeColor = ps . SolidColor () strokeColor . cmyk . cyan = 58 strokeColor . cmyk . magenta = 0 strokeColor . cmyk . yellow = 70 strokeColor . cmyk . black = 0 app . displayDialogs = ps . DialogModes . DisplayNoDialogs selRef . stroke ( strokeColor , 2 , ps . StrokeLocation . OutsideStroke , ps . ColorBlendMode . ColorBlendMode , 75 , True , ) # Set ruler units back the way we found it. app . preferences . rulerUnits = start_ruler_units else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"Create a document with an active selection before running this \" \"script!\" ) Hello World # Import built-in modules import os from tempfile import mkdtemp # Import local modules import photoshop.api as ps def hello_world (): app = ps . Application () doc = app . documents . add () text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) os . startfile ( jpg_file ) if __name__ == \"__main__\" : hello_world () Create Thumbnail \"\"\"Create a thumbnail image for currently active document. You can use the thumbnail image to upload to Shotgun or Ftrack. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session def create_thumbnail ( output_path = None , max_resolution = 512 ): \"\"\"Create a thumbnail image for currently active document. Args: output_path (str): The absolute output path of the thumbnail image. The default is to output to a temporary folder. max_resolution (int): The max resolution of the thumbnail. The default is `512`. Returns: str: The absolute output path of the thumbnail image. \"\"\" output_path = output_path or os . path . join ( mkdtemp (), \"thumb.jpg\" ) with Session ( auto_close = True ) as ps : orig_name = ps . active_document . name width_str = ps . active_document . width height_str = ps . active_document . height thumb_name = f \" { orig_name } _thumb\" max_resolution = width_str / max_resolution thumb_width = int ( width_str / max_resolution ) thumb_height = int ( height_str / max_resolution ) thumb_doc = ps . active_document . duplicate ( thumb_name ) thumb_doc . resizeImage ( thumb_width , thumb_height - 100 ) thumb_doc . saveAs ( output_path , ps . JPEGSaveOptions (), asCopy = True ) thumb_doc . close () return output_path if __name__ == \"__main__\" : thumb_file = create_thumbnail () print ( f \"Save thumbnail file to { thumb_file } .\" ) Current Tool # Import local modules from photoshop import Session with Session () as ps : # Print the current tool. ps . echo ( ps . app . currentTool ) # Set current tool to `typeCreateOrEditTool`. ps . app . currentTool = \"typeCreateOrEditTool\" Add Metadata \"\"\"Add metadata to current active document.\"\"\" # Import built-in modules import os # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document doc . info . author = os . getenv ( \"USERNAME\" ) doc . info . provinceState = \"Beijing\" doc . info . title = \"My Demo\" print ( \"Print all metadata of current active document.\" ) ps . echo ( doc . info ) Export Layers As Png \"\"\"Export every layer as a .png file.\"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () def hide_all_layers ( layers ): for layer in layers : layer . visible = False def main (): psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" ) as ps : doc = ps . active_document options = ps . PNGSaveOptions () options . compression = 1 layers = doc . artLayers for layer in layers : hide_all_layers ( layers ) layer . visible = True layer_path = os . path . join ( doc . path , layer . name ) print ( layer_path ) if not os . path . exists ( layer_path ): os . makedirs ( layer_path ) image_path = os . path . join ( layer_path , f \" { layer . name } .png\" ) doc . saveAs ( image_path , options = options , asCopy = True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) if __name__ == \"__main__\" : main () Photoshop Session \"\"\"Add slate information dynamically.\"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"slate_template.psd\" ] with Session ( file_path , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) os . startfile ( jpg_file ) Session New Document \"\"\"Action for create new document and print new document name.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . echo ( ps . active_document . name ) Cropping \"\"\"A cropping example.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . active_document . crop ( bounds = [ 100 , 12 , 354 , 246 ], width = 1920 , height = 1080 ) Run Batch # Import built-in modules import os # Import local modules from photoshop import Session root = \"your/images/root\" files = [] for name in os . listdir ( root ): files . append ( os . path . join ( root , name )) with Session () as api : options = api . BatchOptions () options . destination = 3 options . destinationFolder = \"c: \\\\ test\" api . app . batch ( files = files , actionName = \"Quadrant Colors\" , actionSet = \"Default Actions\" , options = options ) Convert Smartobject To Layer \"\"\"Convert Smart object to artLayer.\"\"\" # Import local modules from photoshop import Session # example 1 with Session () as ps : js = \"\"\" var idplacedLayerConvertToLayers = stringIDToTypeID( \"placedLayerConvertToLayers\" ); executeAction( idplacedLayerConvertToLayers, undefined, DialogModes.NO ); \"\"\" ps . app . doJavaScript ( js ) # example 2 with Session () as ps : descriptor = ps . ActionDescriptor idplacedLayerConvertToLayers = ps . app . stringIDToTypeID ( \"placedLayerConvertToLayers\" ) ps . app . executeAction ( idplacedLayerConvertToLayers , descriptor ) List Documents \"\"\"List current photoshop all documents.\"\"\" # Import local modules import photoshop.api as ps app = ps . Application () doc = app . documents [ 0 ] print ( doc . name ) for doc in app . documents : print ( doc . name ) Save As Pdf \"\"\"Save current active document as a PDF file.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : option = ps . PDFSaveOptions ( jpegQuality = 12 , layers = True , view = True ) pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option ) with Session () as ps : option = ps . PDFSaveOptions () option . jpegQuality = 12 option . layers = True option . view = True # opens the saved PDF in Acrobat. pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option ) Get Document By Name \"\"\"Get document by document name from documents.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () slate_template = PSD_FILE [ \"slate_template.psd\" ] with Session ( slate_template , action = \"open\" , auto_close = True ) as ps : for doc in ps . app . documents : print ( doc . name ) print ( ps . app . documents . getByName ( \"slate_template.psd\" ) . fullName ) Load Selection # This script will demonstrate how to load a selection from a saved alpha # channel. # Import local modules from photoshop import Session with Session () as ps : doc_ref = ps . app . documents . add ( 320 , 240 ) start_ruler_units = ps . app . preferences . rulerUnits if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels # Save a rectangular selection area offset by 50 pixels from the image # border into an alpha channel. offset = 50 selBounds1 = ( ( offset , offset ), ( doc_ref . Width - offset , offset ), ( doc_ref . Width - offset , doc_ref . Height - offset ), ( offset , doc_ref . Height - offset ), ) doc_ref . selection . select ( selBounds1 ) selAlpha = doc_ref . channels . Add () doc_ref . selection . store ( selAlpha ) # Now create a second wider but less tall selection. selBounds2 = (( 0 , 75 ), ( doc_ref . Width , 75 ), ( doc_ref . Width , 150 ), ( 0 , 150 )) doc_ref . selection . select ( selBounds2 ) # Load the selection from the just saved alpha channel, combining it with # the active selection. doc_ref . selection . load ( selAlpha , ps . SelectionType . ExtendSelection , False ) # Set ruler back to where it was. ps . app . Preferences . RulerUnits = start_ruler_units Save As Tga # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 text_color . rgb . red = 0 text_color . rgb . blue = 0 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color tga_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"test.tga\" ) doc . saveAs ( tga_file , ps . TargaSaveOptions (), asCopy = True ) os . startfile ( tga_file ) Fill Selection # Fill the current selection with an RGB color. # Import local modules from photoshop import Session with Session () as ps : start_ruler_units = ps . app . Preferences . RulerUnits if len ( ps . app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels docRef = ps . app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) docRef . artLayers . add () ps . app . preferences . rulerUnits = start_ruler_units if not ps . active_document . activeLayer . isBackgroundLayer : selRef = ps . active_document . selection fillcolor = ps . SolidColor () fillcolor . rgb . red = 225 fillcolor . rgb . green = 0 fillcolor . rgb . blue = 0 selRef . fill ( fillcolor , ps . ColorBlendMode . NormalBlendColor , 25 , False ) else : ps . echo ( \"Can't perform operation on background layer.\" ) Change Color Of Background And Foreground \"\"\"Change the color of the background and foreground.\"\"\" # Import local modules from photoshop import Session with Session () as ps : foregroundColor = ps . SolidColor () foregroundColor . rgb . red = 255 foregroundColor . rgb . green = 0 foregroundColor . rgb . blue = 0 ps . app . foregroundColor = foregroundColor backgroundColor = ps . SolidColor () backgroundColor . rgb . red = 0 backgroundColor . rgb . green = 0 backgroundColor . rgb . blue = 0 ps . app . backgroundColor = backgroundColor Apply Crystallize Filter Action \"\"\" This script demonstrates how you can use the action manager to execute the Crystallize filter. In order to find all the IDs, see https://helpx.adobe.com/photoshop/kb/downloadable-plugins-and-content.html#ScriptingListenerplugin # noqa: E501 This blog here explains what a script listener is http://blogs.adobe.com/crawlspace/2006/05/installing_and_1.html References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyCrystallizeFilterAction.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () with Session ( PSD_FILE [ \"layer_comps.psd\" ], \"open\" ) as ps : active_document = ps . active_document nLayerSets = active_document . layerSets print ( f \"The total amount of current layerSet (Group) is \" f \" { len ( nLayerSets ) } .\" ) nArtLayers = active_document . layerSets . item ( len ( nLayerSets )) . artLayers # get the last layer in LayerSets active_document . activeLayer = active_document . layerSets . item ( len ( nLayerSets )) . artLayers . item ( len ( nArtLayers )) def applyCrystallize ( cellSize ): cellSizeID = ps . app . CharIDToTypeID ( \"ClSz\" ) eventCrystallizeID = ps . app . CharIDToTypeID ( \"Crst\" ) filterDescriptor = ps . ActionDescriptor filterDescriptor . putInteger ( cellSizeID , cellSize ) ps . app . executeAction ( eventCrystallizeID , filterDescriptor ) applyCrystallize ( 25 ) print ( \"Apply crystallize done.\" ) Operate Layer Set \"\"\"A examples to show you how to operate layerSet.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : docRef = ps . active_document # Add a new layerSet. new_layer_set = docRef . layerSets . add () # Print the layerSet count. ps . echo ( docRef . layerSets . length ) ps . echo ( len ( docRef . layerSets )) # Rename the layerSet. docRef . layerSets [ 0 ] . name = \"New Name\" ps . echo ( new_layer_set . name ) # Change the layerSet opacity new_layer_set . opacity = 90 ps . echo ( new_layer_set . opacity ) # Duplicate the layerSet. duplicate_layer_set = new_layer_set . duplicate () # Add a new artLayer in current active document. layer = docRef . artLayers . add () # Move the artLayer under the duplicate layerSet. layer . move ( duplicate_layer_set , ps . ElementPlacement . PlaceInside ) # Merge the layerSet. merged_layer = duplicate_layer_set . merge () ps . echo ( merged_layer . name ) # Set visible. new_layer_set . visible = False merged_layer . remove () Get Layer By Name # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" , auto_close = True ) as ps : art_layer = ps . active_document . artLayers . getByName ( \"blue\" ) assert art_layer . name == \"blue\" Compare Colors \"\"\"Check whether the foreground is equal to the background color. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CompareColors.py \"\"\" # Import local modules from photoshop import Session with Session () as ps : if ps . app . foregroundColor . isEqual ( ps . app . backgroundColor ): ps . echo ( \"They're Equal.\" ) else : ps . echo ( \"NOT Equal.\" ) Apply Filters \"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyFilters.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules # selections in the open document. import photoshop.api as ps PSD_FILE = psd . get_psd_files () # Start up Photoshop application app = ps . Application () # We don't want any Photoshop dialogs displayed during automated execution app . displayDialogs = ps . DialogModes . DisplayNoDialogs psPixels = 1 start_ruler_units = app . preferences . rulerUnits if start_ruler_units is not psPixels : app . preferences . rulerUnits = psPixels fileName = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( fileName ) nLayerSets = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets ))) - 1 nArtLayers = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets [ nLayerSets ] . artLayers )), ) active_layer = docRef . activeLayer = docRef . layerSets [ nLayerSets ] . artLayers [ nArtLayers ] sel_area = (( 0 , 212 ), ( 300 , 212 ), ( 300 , 300 ), ( 0 , 300 )) docRef . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 20 , True ) print ( f \"Current active layer: { active_layer . name } \" ) active_layer . applyAddNoise ( 15 , ps . NoiseDistribution . GaussianNoise , False ) backColor = ps . SolidColor () backColor . hsb . hue = 0 backColor . hsb . saturation = 0 backColor . hsb . brightness = 100 app . backgroundColor = backColor sel_area2 = (( 120 , 20 ), ( 210 , 20 ), ( 210 , 110 ), ( 120 , 110 )) docRef . selection . select ( sel_area2 , ps . SelectionType . ReplaceSelection , 25 , False ) active_layer . applyDiffuseGlow ( 9 , 12 , 15 ) active_layer . applyGlassEffect ( 7 , 3 , 7 , False , ps . TextureType . TinyLensTexture , None , ) docRef . selection . deselect () # Set ruler units back the way we found it. if start_ruler_units is not psPixels : app . Preferences . RulerUnits = start_ruler_units Export Layers Use Export Options Saveforweb \"\"\"Export every layer as a .png file use `ExportOptionsSaveForWeb`.\"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () def hide_all_layers ( layers ): for layer in layers : layer . visible = False def main (): psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" ) as ps : doc = ps . active_document options = ps . ExportOptionsSaveForWeb () layers = doc . artLayers for layer in layers : hide_all_layers ( layers ) layer . visible = True layer_path = os . path . join ( doc . path , layer . name ) print ( layer_path ) if not os . path . exists ( layer_path ): os . makedirs ( layer_path ) image_path = os . path . join ( layer_path , f \" { layer . name } .png\" ) doc . exportDocument ( image_path , exportAs = ps . ExportType . SaveForWeb , options = options ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) if __name__ == \"__main__\" : main () Toggle Proof Colors \"\"\"Toggle the proof color. Like operating in the menu: **View** > **Proof Colors** (Ctrl + Y) \"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . stringIDToTypeID ( \"toggleProofColors\" )) Eval Javascript # Import local modules import photoshop.api as ps app = ps . Application () jsx = r \"\"\" var doc = app.activeDocument; var orig_name = doc.name; alert(orig_name); \"\"\" app . doJavaScript ( jsx ) # Print name of current active document. print ( app . doJavaScript ( \"app.activeDocument.name\" )) Smart Sharpen \"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules import photoshop.api as ps app = ps . Application () PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( file_path ) nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = app . charIDToTypeID ( \"Amnt\" ) idPrc = app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = app . charIDToTypeID ( \"Rds \" ) idPxl = app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = app . charIDToTypeID ( \"blur\" ) idblurType = app . stringIDToTypeID ( \"blurType\" ) idGsnB = app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) app . ExecuteAction ( idsmart_sharpen_id , desc37 ) SmartSharpen ( 300 , 2.0 , 20 ) Color # Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document # Add a solid color. textColor = ps . SolidColor () textColor . rgb . red = 255.0 textColor . rgb . green = 197 textColor . rgb . blue = 255 # Create empty layer. new_text_layer = doc . artLayers . add () # Set empty layer type to text layer new_text_layer . kind = ps . LayerKind . TextLayer # Set current text layer contents to \"Hello, World!\". new_text_layer . textItem . contents = \"Hello, World!\" # Change current text layer position. new_text_layer . textItem . position = [ 160 , 167 ] # Change current text layer text size. new_text_layer . textItem . size = 36 # Change current text layer color. new_text_layer . textItem . color = textColor assert new_text_layer . textItem . color . rgb . red == textColor . rgb . red Move To End # Import local modules import photoshop.api as ps # Get photoshop instance. app = ps . Application () # Add new document and set name to \"Example for move to End.\" active_document = app . documents . add ( name = \"Example for move to End.\" ) # Add a new layer set. group_layer = active_document . layerSets . add () # Add a layer in the group. layer = group_layer . artLayers . add () layer . name = \"This is a child layer.\" # Add a new layer in this active document top. top_layer = active_document . artLayers . add () top_layer . name = \"This is a top layer.\" top_layer . moveToEnd ( group_layer ) Session Smart Sharpen \"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] with Session ( file_path , action = \"open\" ) as ps : def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = ps . app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = ps . app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = ps . app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = ps . app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = ps . app . charIDToTypeID ( \"Amnt\" ) idPrc = ps . app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = ps . app . charIDToTypeID ( \"Rds \" ) idPxl = ps . app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = ps . app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = ps . app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = ps . app . charIDToTypeID ( \"blur\" ) idblurType = ps . app . stringIDToTypeID ( \"blurType\" ) idGsnB = ps . app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) ps . app . ExecuteAction ( idsmart_sharpen_id , desc37 ) docRef = ps . active_document nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) SmartSharpen ( 300 , 2.0 , 20 ) Session Callback # Import local modules from photoshop import Session def do_something ( photoshop_api ): print ( photoshop_api . active_document ) print ( \"Do something.\" ) with Session ( callback = do_something ) as ps : ps . echo ( ps . active_document . name ) ps . alert ( ps . active_document . name ) Copy And Paste \"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CopyAndPaste.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () startRulerUnits = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Inches doc = app . documents . add ( 7 , 5 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) # Make sure the active layer is not a text layer, which cannot be copied to the # clipboard. if doc . activeLayer . kind != ps . LayerKind . TextLayer : # Select the left half of the document. Selections are always expressed # in pixels regardless of the current ruler unit type, so we're computing # the selection corner points based on the inch unit width and height # of the document x2 = ( doc . width * doc . resolution ) / 2 y2 = doc . height * doc . resolution sel_area = (( 0 , 0 ), ( x2 , 0 ), ( x2 , y2 ), ( 0 , y2 )) doc . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 0 , False ) doc . selection . copy () # The new doc is created # need to change ruler units to pixels because x2 and y2 are pixel units. app . preferences . rulerUnits = ps . Units . Pixels pasteDoc = app . documents . add ( x2 , y2 , doc . resolution , \"Paste Target\" ) pasteDoc . paste () else : print ( \"You cannot copy from a text layer\" ) if startRulerUnits != app . preferences . rulerUnits : app . preferences . rulerUnits = startRulerUnits Trim \"\"\"A trim example.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () example_file = PSD_FILE [ \"trim.psd\" ] with Session ( example_file , action = \"open\" ) as ps : ps . active_document . trim ( ps . TrimType . TopLeftPixel , True , True , True , True ) Create New Document \"\"\"Create a new document.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . preferences . rulerUnits = ps . Units . Pixels ps . app . documents . add ( 1920 , 1080 , name = \"my_new_document\" ) Set Active Layer \"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ActiveLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if app . documents . length < 1 : docRef = app . documents . add () else : docRef = app . activeDocument if docRef . layers . length < 2 : docRef . artLayers . add () activeLayerName = docRef . activeLayer . name if docRef . activeLayer . name != docRef . layers . item ( docRef . layers . length ) . name : docRef . activeLayer = docRef . layers . item ( docRef . layers . length ) else : docRef . activeLayer = docRef . layers . item ( 1 ) Session Hello World \"\"\"Add slate information dynamically.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as adobe : doc = adobe . app . documents . add ( 2000 , 2000 ) text_color = adobe . SolidColor () text_color . rgb . red = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = adobe . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = adobe . JPEGSaveOptions ( quality = 1 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) adobe . app . doJavaScript ( f 'alert(\"save to jpg: { jpg_file } \")' ) Link Layer # Import local modules import photoshop.api as ps app = ps . Application () start_ruler_units = app . preferences . rulerUnits if len ( app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : app . preferences . rulerUnits = ps . Units . Pixels docRef = app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . BackgroundColor , ) else : docRef = app . activeDocument layerRef = docRef . artLayers . add () layerRef2 = docRef . artLayers . add () layerRef . link ( layerRef2 ) # Set the ruler back to where it was app . preferences . rulerUnits = start_ruler_units Do Photoshop Action \"\"\"Do a photoshop action.\"\"\" # Import local modules from photoshop import Session with Session () as api : api . app . doAction ( action = \"Frame Channel - 50 pixel\" ) Replace Images \"\"\"Replace the image of the current active layer with a new image.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () with Session ( PSD_FILE [ \"replace_images.psd\" ], action = \"open\" ) as ps : active_layer = ps . active_document . activeLayer bounds = active_layer . bounds print ( f \"current layer { active_layer . name } : { bounds } \" ) input_file = PSD_FILE [ \"red_100x200.png\" ] replace_contents = ps . app . stringIDToTypeID ( \"placedLayerReplaceContents\" ) desc = ps . ActionDescriptor idnull = ps . app . charIDToTypeID ( \"null\" ) desc . putPath ( idnull , input_file ) ps . app . executeAction ( replace_contents , desc ) # replaced image. active_layer = ps . active_document . activeLayer current_bounds = active_layer . bounds width = bounds [ 2 ] - bounds [ 0 ] height = bounds [ 3 ] - bounds [ 1 ] current_width = current_bounds [ 2 ] - current_bounds [ 0 ] current_height = current_bounds [ 3 ] - current_bounds [ 1 ] new_size = width / current_width * 100 active_layer . resize ( new_size , new_size , ps . AnchorPosition . MiddleCenter ) print ( f \"current layer { active_layer . name } : { current_bounds } \" ) Save To Psd \"\"\"Save your current active document as a .psd file.\"\"\" # Import local modules from photoshop import Session with Session () as ps : psd_file = \"your/psd/save/file/path.psd\" doc = ps . active_document options = ps . PhotoshopSaveOptions () layers = doc . artLayers doc . saveAs ( psd_file , options , True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) Fit On Screen \"\"\"Let the current document Fit on screen.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . charIDToTypeID ( \"FtOn\" )) New Document # Create a new Photoshop document with diminsions 4 inches by 4 inches. # Import local modules import photoshop.api as ps # Start up Photoshop application app = ps . Application () start_ruler_units = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Pixels # Create the document docRef = app . documents . add ( 1920 , 1080 , 72.0 , \"My New Document\" ) # Make sure to set the ruler units prior to creating the document. app . preferences . rulerUnits = start_ruler_units Export Document # Import built-in modules import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () if __name__ == \"__main__\" : psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" , auto_close = True ) as ps : opts = ps . ExportOptionsSaveForWeb () png_file = os . path . join ( mkdtemp (), \"test.png\" ) active_document = ps . app . activeDocument active_document . exportDocument ( png_file , ps . ExportType . SaveForWeb , opts ) os . startfile ( png_file ) Session Document Duplicate \"\"\"Action for duplicate current active document.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"document_duplicate\" ) as ps : ps . echo ( ps . active_document . name ) Operate Channels \"\"\"A examples to show you how to operate active document channels.\"\"\" # Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document print ( len ( doc . channels )) doc . channels . add () doc . channels . removeAll () channel = doc . channels . getByName ( \"Red\" ) print ( channel . name ) channel . remove () Add Slate \"\"\"Add slate information dynamically. - Open template. - Update info. - Save as jpg. - Close current document. \"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () slate_template = PSD_FILE [ \"slate_template.psd\" ] with Session ( slate_template , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) print ( f \"Save jpg to { jpg_file } \" ) os . startfile ( jpg_file ) Rotate Layer \"\"\"This scripts demonstrates how to rotate a layer 45 degrees clockwise. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/RotateLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( app . documents ) > 0 : print ( app . activeDocument . activeLayer . typename ) if not app . activeDocument . activeLayer . isBackgroundLayer : docRef = app . activeDocument layerRef = docRef . layers [ 0 ] layerRef . rotate ( 45.0 ) else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"You must have at least one open document to run this script!\" )","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#creating-a-layer","text":"\"\"\" Let's get the current document and create a new layer \"Background\" and fill it with red color. In order to use the Fill tool we will first select the entire layer and then fill it with a color. \"\"\" # Import local modules from photoshop import Session with Session () as ps : document = ps . active_document # Create color object of color red. fillColor = ps . SolidColor () fillColor . rgb . red = 222 fillColor . rgb . green = 0 fillColor . rgb . blue = 0 # Add a new layer called Background. layer = document . artLayers . add () layer . name = \"Background\" # Select the entire layer. document . selection . selectAll () # Fill the selection with color. document . selection . fill ( fillColor ) # Deselect. document . selection . deselect ()","title":"Creating A Layer"},{"location":"examples/#import-image-as-layer","text":"\"\"\"Import a image as a artLayer.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : desc = ps . ActionDescriptor desc . putPath ( ps . app . charIDToTypeID ( \"null\" ), \"your/image/path\" ) event_id = ps . app . charIDToTypeID ( \"Plc \" ) # `Plc` need one space in here. ps . app . executeAction ( ps . app . charIDToTypeID ( \"Plc \" ), desc )","title":"Import Image As Layer"},{"location":"examples/#emboss-action","text":"# Import local modules from photoshop import Session with Session () as ps : app = ps . app for index , x in enumerate ( range ( 50 )): # Execute an existing action from action palette. idPly = app . charIDToTypeID ( \"Ply \" ) desc8 = ps . ActionDescriptor () idnull = app . charIDToTypeID ( \"null\" ) ref3 = ps . ActionReference () idActn = app . charIDToTypeID ( \"Actn\" ) ref3 . putName ( idActn , \"Sepia Toning (layer)\" ) idASet = app . charIDToTypeID ( \"ASet\" ) ref3 . PutName ( idASet , \"Default Actions\" ) desc8 . putReference ( idnull , ref3 ) app . executeAction ( idPly , desc8 , ps . DialogModes . DisplayNoDialogs ) # Create solid color fill layer. idMk = app . charIDToTypeID ( \"Mk \" ) desc21 = ps . ActionDescriptor () idNull = app . charIDToTypeID ( \"null\" ) ref12 = ps . ActionReference () idContentLayer1 = app . stringIDToTypeID ( \"contentLayer\" ) ref12 . putClass ( idContentLayer1 ) desc21 . putReference ( idNull , ref12 ) idUsng = app . charIDToTypeID ( \"Usng\" ) desc22 = ps . ActionDescriptor () idType = app . charIDToTypeID ( \"Type\" ) desc23 = ps . ActionDescriptor () idClr = app . charIDToTypeID ( \"Clr \" ) desc24 = ps . ActionDescriptor () idRd = app . charIDToTypeID ( \"Rd \" ) desc24 . putDouble ( idRd , index ) idGrn = app . charIDToTypeID ( \"Grn \" ) desc24 . putDouble ( idGrn , index ) idBl = app . charIDToTypeID ( \"Bl \" ) desc24 . putDouble ( idBl , index ) idRGBC = app . charIDToTypeID ( \"RGBC\" ) desc23 . putObject ( idClr , idRGBC , desc24 ) idSolidColorLayer = app . StringIDToTypeID ( \"solidColorLayer\" ) desc22 . putObject ( idType , idSolidColorLayer , desc23 ) idContentLayer2 = app . StringIDToTypeID ( \"contentLayer\" ) desc21 . putObject ( idUsng , idContentLayer2 , desc22 ) app . executeAction ( idMk , desc21 , ps . DialogModes . DisplayNoDialogs ) # Select mask. idSlct = app . charIDToTypeID ( \"slct\" ) desc38 = ps . ActionDescriptor () idNull1 = app . charIDToTypeID ( \"null\" ) ref20 = ps . ActionReference () idChnl1 = app . charIDToTypeID ( \"Chnl\" ) idChnl2 = app . charIDToTypeID ( \"Chnl\" ) idMsk = app . charIDToTypeID ( \"Msk \" ) ref20 . putEnumerated ( idChnl1 , idChnl2 , idMsk ) desc38 . putReference ( idNull1 , ref20 ) idMkVs = app . charIDToTypeID ( \"MkVs\" ) desc38 . putBoolean ( idMkVs , False ) app . executeAction ( idSlct , desc38 , ps . DialogModes . DisplayNoDialogs ) app . activeDocument . activeLayer . invert ()","title":"Emboss Action"},{"location":"examples/#active-layer","text":"# Set the active layer to the last art layer of the active document, or the # first if the last is already active. # Import local modules from photoshop import Session with Session () as ps : if len ( ps . app . documents ) < 1 : docRef = ps . app . documents . add () else : docRef = ps . app . activeDocument if len ( docRef . layers ) < 2 : docRef . artLayers . add () ps . echo ( docRef . activeLayer . name ) new_layer = docRef . artLayers . add () ps . echo ( new_layer . name ) new_layer . name = \"test\"","title":"Active Layer"},{"location":"examples/#open-psd","text":"# Import local modules from photoshop import Session import photoshop.api as ps # style 1 app = ps . Application () app . load ( \"your/psd/or/psb/file_path.psd\" ) # style 2 with Session ( \"your/psd/or/psb/file_path.psd\" , action = \"open\" ) as ps : ps . echo ( ps . active_document . name )","title":"Open Psd"},{"location":"examples/#enable-generator","text":"\"\"\"Enable Generator features.\"\"\" # Import local modules from photoshop import Session with Session () as ps : plugin_name = \"generator-assets-dummy-menu\" generatorDesc = ps . ActionDescriptor generatorDesc . putString ( ps . app . stringIDToTypeID ( \"name\" ), plugin_name ) ps . app . executeAction ( ps . app . stringIDToTypeID ( \"generateAssets\" ), generatorDesc )","title":"Enable Generator"},{"location":"examples/#add-start-application-event","text":"\"\"\"Add event for Photoshop start application. In the current example, every time we start photoshop it will alert \"Start Application Event\". Just like you manually in Script> Script Events Manager to enable the event. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : root = mkdtemp () jsx_file = os . path . join ( root , \"event.jsx\" ) with open ( jsx_file , \"w\" ) as f : f . write ( 'alert(\"Start Application event.\")' ) ps . app . notifiers . add ( ps . EventID . Notify , jsx_file ) print ( \"Add event done.\" )","title":"Add Start Application Event"},{"location":"examples/#selection-stroke","text":"\"\"\"Create a stroke around the current selection, Set the stroke color and width of the new stroke. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SelectionStroke.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( list (( i , x ) for i , x in enumerate ( app . documents , 1 ))) > 0 : if not app . activeDocument . activeLayer . isBackgroundLayer : psPixels = 1 start_ruler_units = app . Preferences . RulerUnits app . preferences . rulerUnits = ps . Units . Pixels selRef = app . activeDocument . selection offset = 10 selBounds = ( ( offset , offset ), ( app . activeDocument . width - offset , offset ), ( app . activeDocument . width - offset , app . activeDocument . height - offset ), ( offset , app . activeDocument . height - offset ), ) selRef . select ( selBounds ) selRef . selectBorder ( 5 ) # create text color properties strokeColor = ps . SolidColor () strokeColor . cmyk . cyan = 58 strokeColor . cmyk . magenta = 0 strokeColor . cmyk . yellow = 70 strokeColor . cmyk . black = 0 app . displayDialogs = ps . DialogModes . DisplayNoDialogs selRef . stroke ( strokeColor , 2 , ps . StrokeLocation . OutsideStroke , ps . ColorBlendMode . ColorBlendMode , 75 , True , ) # Set ruler units back the way we found it. app . preferences . rulerUnits = start_ruler_units else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"Create a document with an active selection before running this \" \"script!\" )","title":"Selection Stroke"},{"location":"examples/#hello-world","text":"# Import built-in modules import os from tempfile import mkdtemp # Import local modules import photoshop.api as ps def hello_world (): app = ps . Application () doc = app . documents . add () text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) os . startfile ( jpg_file ) if __name__ == \"__main__\" : hello_world ()","title":"Hello World"},{"location":"examples/#create-thumbnail","text":"\"\"\"Create a thumbnail image for currently active document. You can use the thumbnail image to upload to Shotgun or Ftrack. \"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session def create_thumbnail ( output_path = None , max_resolution = 512 ): \"\"\"Create a thumbnail image for currently active document. Args: output_path (str): The absolute output path of the thumbnail image. The default is to output to a temporary folder. max_resolution (int): The max resolution of the thumbnail. The default is `512`. Returns: str: The absolute output path of the thumbnail image. \"\"\" output_path = output_path or os . path . join ( mkdtemp (), \"thumb.jpg\" ) with Session ( auto_close = True ) as ps : orig_name = ps . active_document . name width_str = ps . active_document . width height_str = ps . active_document . height thumb_name = f \" { orig_name } _thumb\" max_resolution = width_str / max_resolution thumb_width = int ( width_str / max_resolution ) thumb_height = int ( height_str / max_resolution ) thumb_doc = ps . active_document . duplicate ( thumb_name ) thumb_doc . resizeImage ( thumb_width , thumb_height - 100 ) thumb_doc . saveAs ( output_path , ps . JPEGSaveOptions (), asCopy = True ) thumb_doc . close () return output_path if __name__ == \"__main__\" : thumb_file = create_thumbnail () print ( f \"Save thumbnail file to { thumb_file } .\" )","title":"Create Thumbnail"},{"location":"examples/#current-tool","text":"# Import local modules from photoshop import Session with Session () as ps : # Print the current tool. ps . echo ( ps . app . currentTool ) # Set current tool to `typeCreateOrEditTool`. ps . app . currentTool = \"typeCreateOrEditTool\"","title":"Current Tool"},{"location":"examples/#add-metadata","text":"\"\"\"Add metadata to current active document.\"\"\" # Import built-in modules import os # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document doc . info . author = os . getenv ( \"USERNAME\" ) doc . info . provinceState = \"Beijing\" doc . info . title = \"My Demo\" print ( \"Print all metadata of current active document.\" ) ps . echo ( doc . info )","title":"Add Metadata"},{"location":"examples/#export-layers-as-png","text":"\"\"\"Export every layer as a .png file.\"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () def hide_all_layers ( layers ): for layer in layers : layer . visible = False def main (): psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" ) as ps : doc = ps . active_document options = ps . PNGSaveOptions () options . compression = 1 layers = doc . artLayers for layer in layers : hide_all_layers ( layers ) layer . visible = True layer_path = os . path . join ( doc . path , layer . name ) print ( layer_path ) if not os . path . exists ( layer_path ): os . makedirs ( layer_path ) image_path = os . path . join ( layer_path , f \" { layer . name } .png\" ) doc . saveAs ( image_path , options = options , asCopy = True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) if __name__ == \"__main__\" : main ()","title":"Export Layers As Png"},{"location":"examples/#photoshop-session","text":"\"\"\"Add slate information dynamically.\"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"slate_template.psd\" ] with Session ( file_path , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) os . startfile ( jpg_file )","title":"Photoshop Session"},{"location":"examples/#session-new-document","text":"\"\"\"Action for create new document and print new document name.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . echo ( ps . active_document . name )","title":"Session New Document"},{"location":"examples/#cropping","text":"\"\"\"A cropping example.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : ps . active_document . crop ( bounds = [ 100 , 12 , 354 , 246 ], width = 1920 , height = 1080 )","title":"Cropping"},{"location":"examples/#run-batch","text":"# Import built-in modules import os # Import local modules from photoshop import Session root = \"your/images/root\" files = [] for name in os . listdir ( root ): files . append ( os . path . join ( root , name )) with Session () as api : options = api . BatchOptions () options . destination = 3 options . destinationFolder = \"c: \\\\ test\" api . app . batch ( files = files , actionName = \"Quadrant Colors\" , actionSet = \"Default Actions\" , options = options )","title":"Run Batch"},{"location":"examples/#convert-smartobject-to-layer","text":"\"\"\"Convert Smart object to artLayer.\"\"\" # Import local modules from photoshop import Session # example 1 with Session () as ps : js = \"\"\" var idplacedLayerConvertToLayers = stringIDToTypeID( \"placedLayerConvertToLayers\" ); executeAction( idplacedLayerConvertToLayers, undefined, DialogModes.NO ); \"\"\" ps . app . doJavaScript ( js ) # example 2 with Session () as ps : descriptor = ps . ActionDescriptor idplacedLayerConvertToLayers = ps . app . stringIDToTypeID ( \"placedLayerConvertToLayers\" ) ps . app . executeAction ( idplacedLayerConvertToLayers , descriptor )","title":"Convert Smartobject To Layer"},{"location":"examples/#list-documents","text":"\"\"\"List current photoshop all documents.\"\"\" # Import local modules import photoshop.api as ps app = ps . Application () doc = app . documents [ 0 ] print ( doc . name ) for doc in app . documents : print ( doc . name )","title":"List Documents"},{"location":"examples/#save-as-pdf","text":"\"\"\"Save current active document as a PDF file.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as ps : option = ps . PDFSaveOptions ( jpegQuality = 12 , layers = True , view = True ) pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option ) with Session () as ps : option = ps . PDFSaveOptions () option . jpegQuality = 12 option . layers = True option . view = True # opens the saved PDF in Acrobat. pdf = os . path . join ( mkdtemp (), \"test.pdf\" ) ps . active_document . saveAs ( pdf , option )","title":"Save As Pdf"},{"location":"examples/#get-document-by-name","text":"\"\"\"Get document by document name from documents.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () slate_template = PSD_FILE [ \"slate_template.psd\" ] with Session ( slate_template , action = \"open\" , auto_close = True ) as ps : for doc in ps . app . documents : print ( doc . name ) print ( ps . app . documents . getByName ( \"slate_template.psd\" ) . fullName )","title":"Get Document By Name"},{"location":"examples/#load-selection","text":"# This script will demonstrate how to load a selection from a saved alpha # channel. # Import local modules from photoshop import Session with Session () as ps : doc_ref = ps . app . documents . add ( 320 , 240 ) start_ruler_units = ps . app . preferences . rulerUnits if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels # Save a rectangular selection area offset by 50 pixels from the image # border into an alpha channel. offset = 50 selBounds1 = ( ( offset , offset ), ( doc_ref . Width - offset , offset ), ( doc_ref . Width - offset , doc_ref . Height - offset ), ( offset , doc_ref . Height - offset ), ) doc_ref . selection . select ( selBounds1 ) selAlpha = doc_ref . channels . Add () doc_ref . selection . store ( selAlpha ) # Now create a second wider but less tall selection. selBounds2 = (( 0 , 75 ), ( doc_ref . Width , 75 ), ( doc_ref . Width , 150 ), ( 0 , 150 )) doc_ref . selection . select ( selBounds2 ) # Load the selection from the just saved alpha channel, combining it with # the active selection. doc_ref . selection . load ( selAlpha , ps . SelectionType . ExtendSelection , False ) # Set ruler back to where it was. ps . app . Preferences . RulerUnits = start_ruler_units","title":"Load Selection"},{"location":"examples/#save-as-tga","text":"# Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 text_color . rgb . red = 0 text_color . rgb . blue = 0 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color tga_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"test.tga\" ) doc . saveAs ( tga_file , ps . TargaSaveOptions (), asCopy = True ) os . startfile ( tga_file )","title":"Save As Tga"},{"location":"examples/#fill-selection","text":"# Fill the current selection with an RGB color. # Import local modules from photoshop import Session with Session () as ps : start_ruler_units = ps . app . Preferences . RulerUnits if len ( ps . app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : ps . app . Preferences . RulerUnits = ps . Units . Pixels docRef = ps . app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) docRef . artLayers . add () ps . app . preferences . rulerUnits = start_ruler_units if not ps . active_document . activeLayer . isBackgroundLayer : selRef = ps . active_document . selection fillcolor = ps . SolidColor () fillcolor . rgb . red = 225 fillcolor . rgb . green = 0 fillcolor . rgb . blue = 0 selRef . fill ( fillcolor , ps . ColorBlendMode . NormalBlendColor , 25 , False ) else : ps . echo ( \"Can't perform operation on background layer.\" )","title":"Fill Selection"},{"location":"examples/#change-color-of-background-and-foreground","text":"\"\"\"Change the color of the background and foreground.\"\"\" # Import local modules from photoshop import Session with Session () as ps : foregroundColor = ps . SolidColor () foregroundColor . rgb . red = 255 foregroundColor . rgb . green = 0 foregroundColor . rgb . blue = 0 ps . app . foregroundColor = foregroundColor backgroundColor = ps . SolidColor () backgroundColor . rgb . red = 0 backgroundColor . rgb . green = 0 backgroundColor . rgb . blue = 0 ps . app . backgroundColor = backgroundColor","title":"Change Color Of Background And Foreground"},{"location":"examples/#apply-crystallize-filter-action","text":"\"\"\" This script demonstrates how you can use the action manager to execute the Crystallize filter. In order to find all the IDs, see https://helpx.adobe.com/photoshop/kb/downloadable-plugins-and-content.html#ScriptingListenerplugin # noqa: E501 This blog here explains what a script listener is http://blogs.adobe.com/crawlspace/2006/05/installing_and_1.html References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyCrystallizeFilterAction.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () with Session ( PSD_FILE [ \"layer_comps.psd\" ], \"open\" ) as ps : active_document = ps . active_document nLayerSets = active_document . layerSets print ( f \"The total amount of current layerSet (Group) is \" f \" { len ( nLayerSets ) } .\" ) nArtLayers = active_document . layerSets . item ( len ( nLayerSets )) . artLayers # get the last layer in LayerSets active_document . activeLayer = active_document . layerSets . item ( len ( nLayerSets )) . artLayers . item ( len ( nArtLayers )) def applyCrystallize ( cellSize ): cellSizeID = ps . app . CharIDToTypeID ( \"ClSz\" ) eventCrystallizeID = ps . app . CharIDToTypeID ( \"Crst\" ) filterDescriptor = ps . ActionDescriptor filterDescriptor . putInteger ( cellSizeID , cellSize ) ps . app . executeAction ( eventCrystallizeID , filterDescriptor ) applyCrystallize ( 25 ) print ( \"Apply crystallize done.\" )","title":"Apply Crystallize Filter Action"},{"location":"examples/#operate-layer-set","text":"\"\"\"A examples to show you how to operate layerSet.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"new_document\" ) as ps : docRef = ps . active_document # Add a new layerSet. new_layer_set = docRef . layerSets . add () # Print the layerSet count. ps . echo ( docRef . layerSets . length ) ps . echo ( len ( docRef . layerSets )) # Rename the layerSet. docRef . layerSets [ 0 ] . name = \"New Name\" ps . echo ( new_layer_set . name ) # Change the layerSet opacity new_layer_set . opacity = 90 ps . echo ( new_layer_set . opacity ) # Duplicate the layerSet. duplicate_layer_set = new_layer_set . duplicate () # Add a new artLayer in current active document. layer = docRef . artLayers . add () # Move the artLayer under the duplicate layerSet. layer . move ( duplicate_layer_set , ps . ElementPlacement . PlaceInside ) # Merge the layerSet. merged_layer = duplicate_layer_set . merge () ps . echo ( merged_layer . name ) # Set visible. new_layer_set . visible = False merged_layer . remove ()","title":"Operate Layer Set"},{"location":"examples/#get-layer-by-name","text":"# Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" , auto_close = True ) as ps : art_layer = ps . active_document . artLayers . getByName ( \"blue\" ) assert art_layer . name == \"blue\"","title":"Get Layer By Name"},{"location":"examples/#compare-colors","text":"\"\"\"Check whether the foreground is equal to the background color. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CompareColors.py \"\"\" # Import local modules from photoshop import Session with Session () as ps : if ps . app . foregroundColor . isEqual ( ps . app . backgroundColor ): ps . echo ( \"They're Equal.\" ) else : ps . echo ( \"NOT Equal.\" )","title":"Compare Colors"},{"location":"examples/#apply-filters","text":"\"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ApplyFilters.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules # selections in the open document. import photoshop.api as ps PSD_FILE = psd . get_psd_files () # Start up Photoshop application app = ps . Application () # We don't want any Photoshop dialogs displayed during automated execution app . displayDialogs = ps . DialogModes . DisplayNoDialogs psPixels = 1 start_ruler_units = app . preferences . rulerUnits if start_ruler_units is not psPixels : app . preferences . rulerUnits = psPixels fileName = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( fileName ) nLayerSets = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets ))) - 1 nArtLayers = len ( list (( i , x ) for i , x in enumerate ( docRef . layerSets [ nLayerSets ] . artLayers )), ) active_layer = docRef . activeLayer = docRef . layerSets [ nLayerSets ] . artLayers [ nArtLayers ] sel_area = (( 0 , 212 ), ( 300 , 212 ), ( 300 , 300 ), ( 0 , 300 )) docRef . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 20 , True ) print ( f \"Current active layer: { active_layer . name } \" ) active_layer . applyAddNoise ( 15 , ps . NoiseDistribution . GaussianNoise , False ) backColor = ps . SolidColor () backColor . hsb . hue = 0 backColor . hsb . saturation = 0 backColor . hsb . brightness = 100 app . backgroundColor = backColor sel_area2 = (( 120 , 20 ), ( 210 , 20 ), ( 210 , 110 ), ( 120 , 110 )) docRef . selection . select ( sel_area2 , ps . SelectionType . ReplaceSelection , 25 , False ) active_layer . applyDiffuseGlow ( 9 , 12 , 15 ) active_layer . applyGlassEffect ( 7 , 3 , 7 , False , ps . TextureType . TinyLensTexture , None , ) docRef . selection . deselect () # Set ruler units back the way we found it. if start_ruler_units is not psPixels : app . Preferences . RulerUnits = start_ruler_units","title":"Apply Filters"},{"location":"examples/#export-layers-use-export-options-saveforweb","text":"\"\"\"Export every layer as a .png file use `ExportOptionsSaveForWeb`.\"\"\" # Import built-in modules import os # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () def hide_all_layers ( layers ): for layer in layers : layer . visible = False def main (): psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" ) as ps : doc = ps . active_document options = ps . ExportOptionsSaveForWeb () layers = doc . artLayers for layer in layers : hide_all_layers ( layers ) layer . visible = True layer_path = os . path . join ( doc . path , layer . name ) print ( layer_path ) if not os . path . exists ( layer_path ): os . makedirs ( layer_path ) image_path = os . path . join ( layer_path , f \" { layer . name } .png\" ) doc . exportDocument ( image_path , exportAs = ps . ExportType . SaveForWeb , options = options ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer ) if __name__ == \"__main__\" : main ()","title":"Export Layers Use Export Options Saveforweb"},{"location":"examples/#toggle-proof-colors","text":"\"\"\"Toggle the proof color. Like operating in the menu: **View** > **Proof Colors** (Ctrl + Y) \"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . stringIDToTypeID ( \"toggleProofColors\" ))","title":"Toggle Proof Colors"},{"location":"examples/#eval-javascript","text":"# Import local modules import photoshop.api as ps app = ps . Application () jsx = r \"\"\" var doc = app.activeDocument; var orig_name = doc.name; alert(orig_name); \"\"\" app . doJavaScript ( jsx ) # Print name of current active document. print ( app . doJavaScript ( \"app.activeDocument.name\" ))","title":"Eval Javascript"},{"location":"examples/#smart-sharpen","text":"\"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules import photoshop.api as ps app = ps . Application () PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] docRef = app . open ( file_path ) nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = app . charIDToTypeID ( \"Amnt\" ) idPrc = app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = app . charIDToTypeID ( \"Rds \" ) idPxl = app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = app . charIDToTypeID ( \"blur\" ) idblurType = app . stringIDToTypeID ( \"blurType\" ) idGsnB = app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) app . ExecuteAction ( idsmart_sharpen_id , desc37 ) SmartSharpen ( 300 , 2.0 , 20 )","title":"Smart Sharpen"},{"location":"examples/#color","text":"# Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document # Add a solid color. textColor = ps . SolidColor () textColor . rgb . red = 255.0 textColor . rgb . green = 197 textColor . rgb . blue = 255 # Create empty layer. new_text_layer = doc . artLayers . add () # Set empty layer type to text layer new_text_layer . kind = ps . LayerKind . TextLayer # Set current text layer contents to \"Hello, World!\". new_text_layer . textItem . contents = \"Hello, World!\" # Change current text layer position. new_text_layer . textItem . position = [ 160 , 167 ] # Change current text layer text size. new_text_layer . textItem . size = 36 # Change current text layer color. new_text_layer . textItem . color = textColor assert new_text_layer . textItem . color . rgb . red == textColor . rgb . red","title":"Color"},{"location":"examples/#move-to-end","text":"# Import local modules import photoshop.api as ps # Get photoshop instance. app = ps . Application () # Add new document and set name to \"Example for move to End.\" active_document = app . documents . add ( name = \"Example for move to End.\" ) # Add a new layer set. group_layer = active_document . layerSets . add () # Add a layer in the group. layer = group_layer . artLayers . add () layer . name = \"This is a child layer.\" # Add a new layer in this active document top. top_layer = active_document . artLayers . add () top_layer . name = \"This is a top layer.\" top_layer . moveToEnd ( group_layer )","title":"Move To End"},{"location":"examples/#session-smart-sharpen","text":"\"\"\"This script demonstrates how you can use the action manager to execute the Emboss filter. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/SmartSharpen.py \"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () file_path = PSD_FILE [ \"layer_comps.psd\" ] with Session ( file_path , action = \"open\" ) as ps : def SmartSharpen ( inAmount , inRadius , inNoise ): idsmart_sharpen_id = ps . app . stringIDToTypeID ( ps . EventID . SmartSharpen ) desc37 = ps . ActionDescriptor () idpresetKind = ps . app . stringIDToTypeID ( ps . EventID . PresetKind ) idpresetKindType = ps . app . stringIDToTypeID ( ps . EventID . PresetKindType ) idpresetKindCustom = ps . app . stringIDToTypeID ( ps . EventID . PresetKindCustom ) desc37 . putEnumerated ( idpresetKind , idpresetKindType , idpresetKindCustom ) idAmnt = ps . app . charIDToTypeID ( \"Amnt\" ) idPrc = ps . app . charIDToTypeID ( \"Rds \" ) desc37 . putUnitDouble ( idAmnt , idPrc , inAmount ) idRds = ps . app . charIDToTypeID ( \"Rds \" ) idPxl = ps . app . charIDToTypeID ( \"#Pxl\" ) desc37 . putUnitDouble ( idRds , idPxl , inRadius ) idnoiseReduction = ps . app . stringIDToTypeID ( \"noiseReduction\" ) idPrc = ps . app . charIDToTypeID ( \"#Prc\" ) desc37 . putUnitDouble ( idnoiseReduction , idPrc , inNoise ) idblur = ps . app . charIDToTypeID ( \"blur\" ) idblurType = ps . app . stringIDToTypeID ( \"blurType\" ) idGsnB = ps . app . charIDToTypeID ( \"GsnB\" ) desc37 . putEnumerated ( idblur , idblurType , idGsnB ) ps . app . ExecuteAction ( idsmart_sharpen_id , desc37 ) docRef = ps . active_document nlayerSets = docRef . layerSets nArtLayers = docRef . layerSets . item ( nlayerSets . length ) docRef . activeLayer = nArtLayers . artLayers . item ( nArtLayers . artLayers . length ) SmartSharpen ( 300 , 2.0 , 20 )","title":"Session Smart Sharpen"},{"location":"examples/#session-callback","text":"# Import local modules from photoshop import Session def do_something ( photoshop_api ): print ( photoshop_api . active_document ) print ( \"Do something.\" ) with Session ( callback = do_something ) as ps : ps . echo ( ps . active_document . name ) ps . alert ( ps . active_document . name )","title":"Session Callback"},{"location":"examples/#copy-and-paste","text":"\"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/CopyAndPaste.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () startRulerUnits = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Inches doc = app . documents . add ( 7 , 5 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . White ) # Make sure the active layer is not a text layer, which cannot be copied to the # clipboard. if doc . activeLayer . kind != ps . LayerKind . TextLayer : # Select the left half of the document. Selections are always expressed # in pixels regardless of the current ruler unit type, so we're computing # the selection corner points based on the inch unit width and height # of the document x2 = ( doc . width * doc . resolution ) / 2 y2 = doc . height * doc . resolution sel_area = (( 0 , 0 ), ( x2 , 0 ), ( x2 , y2 ), ( 0 , y2 )) doc . selection . select ( sel_area , ps . SelectionType . ReplaceSelection , 0 , False ) doc . selection . copy () # The new doc is created # need to change ruler units to pixels because x2 and y2 are pixel units. app . preferences . rulerUnits = ps . Units . Pixels pasteDoc = app . documents . add ( x2 , y2 , doc . resolution , \"Paste Target\" ) pasteDoc . paste () else : print ( \"You cannot copy from a text layer\" ) if startRulerUnits != app . preferences . rulerUnits : app . preferences . rulerUnits = startRulerUnits","title":"Copy And Paste"},{"location":"examples/#trim","text":"\"\"\"A trim example.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () example_file = PSD_FILE [ \"trim.psd\" ] with Session ( example_file , action = \"open\" ) as ps : ps . active_document . trim ( ps . TrimType . TopLeftPixel , True , True , True , True )","title":"Trim"},{"location":"examples/#create-new-document","text":"\"\"\"Create a new document.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . preferences . rulerUnits = ps . Units . Pixels ps . app . documents . add ( 1920 , 1080 , name = \"my_new_document\" )","title":"Create New Document"},{"location":"examples/#set-active-layer","text":"\"\"\" References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/ActiveLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if app . documents . length < 1 : docRef = app . documents . add () else : docRef = app . activeDocument if docRef . layers . length < 2 : docRef . artLayers . add () activeLayerName = docRef . activeLayer . name if docRef . activeLayer . name != docRef . layers . item ( docRef . layers . length ) . name : docRef . activeLayer = docRef . layers . item ( docRef . layers . length ) else : docRef . activeLayer = docRef . layers . item ( 1 )","title":"Set Active Layer"},{"location":"examples/#session-hello-world","text":"\"\"\"Add slate information dynamically.\"\"\" # Import built-in modules import os from tempfile import mkdtemp # Import local modules from photoshop import Session with Session () as adobe : doc = adobe . app . documents . add ( 2000 , 2000 ) text_color = adobe . SolidColor () text_color . rgb . red = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = adobe . LayerKind . TextLayer new_text_layer . textItem . contents = \"Hello, World!\" new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = adobe . JPEGSaveOptions ( quality = 1 ) jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"hello_world.jpg\" ) doc . saveAs ( jpg_file , options , asCopy = True ) adobe . app . doJavaScript ( f 'alert(\"save to jpg: { jpg_file } \")' )","title":"Session Hello World"},{"location":"examples/#link-layer","text":"# Import local modules import photoshop.api as ps app = ps . Application () start_ruler_units = app . preferences . rulerUnits if len ( app . documents ) < 1 : if start_ruler_units is not ps . Units . Pixels : app . preferences . rulerUnits = ps . Units . Pixels docRef = app . documents . add ( 320 , 240 , 72 , None , ps . NewDocumentMode . NewRGB , ps . DocumentFill . BackgroundColor , ) else : docRef = app . activeDocument layerRef = docRef . artLayers . add () layerRef2 = docRef . artLayers . add () layerRef . link ( layerRef2 ) # Set the ruler back to where it was app . preferences . rulerUnits = start_ruler_units","title":"Link Layer"},{"location":"examples/#do-photoshop-action","text":"\"\"\"Do a photoshop action.\"\"\" # Import local modules from photoshop import Session with Session () as api : api . app . doAction ( action = \"Frame Channel - 50 pixel\" )","title":"Do Photoshop Action"},{"location":"examples/#replace-images","text":"\"\"\"Replace the image of the current active layer with a new image.\"\"\" # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () with Session ( PSD_FILE [ \"replace_images.psd\" ], action = \"open\" ) as ps : active_layer = ps . active_document . activeLayer bounds = active_layer . bounds print ( f \"current layer { active_layer . name } : { bounds } \" ) input_file = PSD_FILE [ \"red_100x200.png\" ] replace_contents = ps . app . stringIDToTypeID ( \"placedLayerReplaceContents\" ) desc = ps . ActionDescriptor idnull = ps . app . charIDToTypeID ( \"null\" ) desc . putPath ( idnull , input_file ) ps . app . executeAction ( replace_contents , desc ) # replaced image. active_layer = ps . active_document . activeLayer current_bounds = active_layer . bounds width = bounds [ 2 ] - bounds [ 0 ] height = bounds [ 3 ] - bounds [ 1 ] current_width = current_bounds [ 2 ] - current_bounds [ 0 ] current_height = current_bounds [ 3 ] - current_bounds [ 1 ] new_size = width / current_width * 100 active_layer . resize ( new_size , new_size , ps . AnchorPosition . MiddleCenter ) print ( f \"current layer { active_layer . name } : { current_bounds } \" )","title":"Replace Images"},{"location":"examples/#save-to-psd","text":"\"\"\"Save your current active document as a .psd file.\"\"\" # Import local modules from photoshop import Session with Session () as ps : psd_file = \"your/psd/save/file/path.psd\" doc = ps . active_document options = ps . PhotoshopSaveOptions () layers = doc . artLayers doc . saveAs ( psd_file , options , True ) ps . alert ( \"Task done!\" ) ps . echo ( doc . activeLayer )","title":"Save To Psd"},{"location":"examples/#fit-on-screen","text":"\"\"\"Let the current document Fit on screen.\"\"\" # Import local modules from photoshop import Session with Session () as ps : ps . app . runMenuItem ( ps . app . charIDToTypeID ( \"FtOn\" ))","title":"Fit On Screen"},{"location":"examples/#new-document","text":"# Create a new Photoshop document with diminsions 4 inches by 4 inches. # Import local modules import photoshop.api as ps # Start up Photoshop application app = ps . Application () start_ruler_units = app . preferences . rulerUnits app . preferences . rulerUnits = ps . Units . Pixels # Create the document docRef = app . documents . add ( 1920 , 1080 , 72.0 , \"My New Document\" ) # Make sure to set the ruler units prior to creating the document. app . preferences . rulerUnits = start_ruler_units","title":"New Document"},{"location":"examples/#export-document","text":"# Import built-in modules import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () if __name__ == \"__main__\" : psd_file = PSD_FILE [ \"export_layers_as_png.psd\" ] with Session ( psd_file , action = \"open\" , auto_close = True ) as ps : opts = ps . ExportOptionsSaveForWeb () png_file = os . path . join ( mkdtemp (), \"test.png\" ) active_document = ps . app . activeDocument active_document . exportDocument ( png_file , ps . ExportType . SaveForWeb , opts ) os . startfile ( png_file )","title":"Export Document"},{"location":"examples/#session-document-duplicate","text":"\"\"\"Action for duplicate current active document.\"\"\" # Import local modules from photoshop import Session with Session ( action = \"document_duplicate\" ) as ps : ps . echo ( ps . active_document . name )","title":"Session Document Duplicate"},{"location":"examples/#operate-channels","text":"\"\"\"A examples to show you how to operate active document channels.\"\"\" # Import local modules from photoshop import Session with Session () as ps : doc = ps . active_document print ( len ( doc . channels )) doc . channels . add () doc . channels . removeAll () channel = doc . channels . getByName ( \"Red\" ) print ( channel . name ) channel . remove ()","title":"Operate Channels"},{"location":"examples/#add-slate","text":"\"\"\"Add slate information dynamically. - Open template. - Update info. - Save as jpg. - Close current document. \"\"\" # Import built-in modules from datetime import datetime import os from tempfile import mkdtemp # Import third-party modules import examples._psd_files as psd # Import from examples. # Import local modules from photoshop import Session PSD_FILE = psd . get_psd_files () slate_template = PSD_FILE [ \"slate_template.psd\" ] with Session ( slate_template , action = \"open\" , auto_close = True ) as ps : layer_set = ps . active_document . layerSets . getByName ( \"template\" ) data = { \"project name\" : \"test_project\" , \"datetime\" : datetime . today () . strftime ( \"%Y-%m- %d \" ), } for layer in layer_set . layers : if layer . kind == ps . LayerKind . TextLayer : layer . textItem . contents = data [ layer . textItem . contents . strip ()] jpg_file = os . path . join ( mkdtemp ( \"photoshop-python-api\" ), \"slate.jpg\" ) ps . active_document . saveAs ( jpg_file , ps . JPEGSaveOptions ()) print ( f \"Save jpg to { jpg_file } \" ) os . startfile ( jpg_file )","title":"Add Slate"},{"location":"examples/#rotate-layer","text":"\"\"\"This scripts demonstrates how to rotate a layer 45 degrees clockwise. References: https://github.com/lohriialo/photoshop-scripting-python/blob/master/RotateLayer.py \"\"\" # Import local modules import photoshop.api as ps app = ps . Application () if len ( app . documents ) > 0 : print ( app . activeDocument . activeLayer . typename ) if not app . activeDocument . activeLayer . isBackgroundLayer : docRef = app . activeDocument layerRef = docRef . layers [ 0 ] layerRef . rotate ( 45.0 ) else : print ( \"Operation cannot be performed on background layer\" ) else : print ( \"You must have at least one open document to run this script!\" )","title":"Rotate Layer"},{"location":"reference/SUMMARY/","text":"photoshop api active_layer artlayer artlayers channel channels core document documentinfo documents layerComp layerComps layerSet layerSets layers measurement_log notifier notifiers preferences selection text_fonts action_descriptor action_list action_reference application batch_options colors cmyk gray hsb lab rgb constants enumerations errors event_id open_options eps save_options bmp eps gif jpg pdf png psd tag tif solid_color text_font text_item session","title":"SUMMARY"},{"location":"reference/photoshop/session/","text":"photoshop.session Provides a public session class for Photoshop api. Usually we only need to manipulate the currently active document of photoshop. So as follows: from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' ) Session ( file_path = None , action = None , callback = None , auto_close = False , ps_version = None ) Session of photoshop. We can control active documents in this Session. Attributes: app ( Application ) \u2013 Application of Photoshop. ActionReference ( ActionReference ) \u2013 ActionDescriptor ( ActionDescriptor ) \u2013 Examples: from photoshop import Session with Session ( \"your/psd/or/psb/file_path.psd\" , action = \"open\" ) as ps : ps . echo ( ps . active_document . name ) Parameters: file_path ( str ) \u2013 The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. action ( str ) \u2013 Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. callback ( Any ) \u2013 The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. auto_close ( bool ) \u2013 Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. ps_version ( str ) \u2013 Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6 active_document () writable property Get current active document. Raises: - PhotoshopPythonAPICOMError \u2013 No active document available. alert ( text ) Alert message box in photoshop. Parameters: text ( str ) \u2013 The text will pop up in photoshop. close () closing current session. echo ( * args , ** kwargs ) staticmethod Print message.","title":"session"},{"location":"reference/photoshop/session/#photoshop.session","text":"Provides a public session class for Photoshop api. Usually we only need to manipulate the currently active document of photoshop. So as follows: from photoshop import Session with Session ( action = \"new_document\" ) as ps : doc = ps . active_document text_color = ps . SolidColor () text_color . rgb . green = 255 new_text_layer = doc . artLayers . add () new_text_layer . kind = ps . LayerKind . TextLayer new_text_layer . textItem . contents = 'Hello, World!' new_text_layer . textItem . position = [ 160 , 167 ] new_text_layer . textItem . size = 40 new_text_layer . textItem . color = text_color options = ps . JPEGSaveOptions ( quality = 5 ) jpg = 'd:/hello_world.jpg' doc . saveAs ( jpg , options , asCopy = True ) ps . app . doJavaScript ( f 'alert(\"save to jpg: { jpg } \")' )","title":"session"},{"location":"reference/photoshop/session/#photoshop.session.Session","text":"Session of photoshop. We can control active documents in this Session. Attributes: app ( Application ) \u2013 Application of Photoshop. ActionReference ( ActionReference ) \u2013 ActionDescriptor ( ActionDescriptor ) \u2013 Examples: from photoshop import Session with Session ( \"your/psd/or/psb/file_path.psd\" , action = \"open\" ) as ps : ps . echo ( ps . active_document . name ) Parameters: file_path ( str ) \u2013 The absolute path of the file. This path can be used together with action. If the path is an existing psd` or image path, use open`` action to open this file in the current session. action ( str ) \u2013 Name of the action. .e.g: - open Open the file from the option file_path . - new_document Create a new document. - document_duplicate Duplicate current active document. callback ( Any ) \u2013 The callback function for this Photoshop session. The idea behind it is to allow us to pass some custom callback function every time we exit the current Photoshop session. auto_close ( bool ) \u2013 Is it necessary to close the current document when exiting the current context session. The default is False not to exit current session. ps_version ( str ) \u2013 Specify the version number of photoshop. .e.g: - 2022 - 2021 - cs6","title":"Session"},{"location":"reference/photoshop/session/#photoshop.session.Session.active_document","text":"Get current active document. Raises: - PhotoshopPythonAPICOMError \u2013 No active document available.","title":"active_document()"},{"location":"reference/photoshop/session/#photoshop.session.Session.alert","text":"Alert message box in photoshop. Parameters: text ( str ) \u2013 The text will pop up in photoshop.","title":"alert()"},{"location":"reference/photoshop/session/#photoshop.session.Session.close","text":"closing current session.","title":"close()"},{"location":"reference/photoshop/session/#photoshop.session.Session.echo","text":"Print message.","title":"echo()"},{"location":"reference/photoshop/api/_active_layer/","text":"photoshop.api._active_layer ActiveLayer Bases: Photoshop The selected layer. add () Adds an element. name () property The name of the layer.","title":"active_layer"},{"location":"reference/photoshop/api/_active_layer/#photoshop.api._active_layer","text":"","title":"_active_layer"},{"location":"reference/photoshop/api/_active_layer/#photoshop.api._active_layer.ActiveLayer","text":"Bases: Photoshop The selected layer.","title":"ActiveLayer"},{"location":"reference/photoshop/api/_active_layer/#photoshop.api._active_layer.ActiveLayer.add","text":"Adds an element.","title":"add()"},{"location":"reference/photoshop/api/_active_layer/#photoshop.api._active_layer.ActiveLayer.name","text":"The name of the layer.","title":"name()"},{"location":"reference/photoshop/api/_artlayer/","text":"photoshop.api._artlayer ArtLayer ( parent = None ) Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application). adjustBrightnessContrast ( brightness , contrast ) Adjusts the brightness and contrast. Parameters: brightness ( int ) \u2013 The brightness amount. Range: -100 to 100. contrast ( int ) \u2013 The contrast amount. Range: -100 to 100. adjustColorBalance ( shadows , midtones , highlights , preserveLuminosity ) Adjusts the color balance of the layer\u2019s component channels. Parameters: shadows \u2013 The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. midtones \u2013 The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. highlights \u2013 The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. preserveLuminosity \u2013 If true, luminosity is preserved. adjustCurves ( curveShape ) Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: curveShape \u2013 The curve points. The number of points must be between 2 and 14. adjustLevels ( inputRangeStart , inputRangeEnd , inputRangeGamma , outputRangeStart , outputRangeEnd ) Adjusts levels of the selected channels. Parameters: inputRangeStart \u2013 inputRangeEnd \u2013 inputRangeGamma \u2013 outputRangeStart \u2013 outputRangeEnd \u2013 applyAverage () Applies the average filter. applyBlur () Applies the blur filter. applyBlurMore () Applies the blur more filter. applyClouds () Applies the clouds filter. applyCustomFilter ( characteristics , scale , offset ) Applies the custom filter. applyDeInterlace ( eliminateFields , createFields ) Applies the de-interlace filter. applyDifferenceClouds () Applies the difference clouds filter. applyDiffuseGlow ( graininess , amount , clear_amount ) Applies the diffuse glow filter. Parameters: graininess \u2013 The amount of graininess. Range: 0 to 10. amount \u2013 The glow amount. Range: 0 to 20. clear_amount \u2013 The clear amount. Range: 0 to 20. applyDisplace ( horizontalScale , verticalScale , displacementType , undefinedAreas , displacementMapFile ) Applies the displace filter. applyDustAndScratches ( radius , threshold ) Applies the dust and scratches filter. applyGaussianBlur ( radius ) Applies the gaussian blur filter. applyHighPass ( radius ) Applies the high pass filter. applyLensBlur ( source , focalDistance , invertDepthMap , shape , radius , bladeCurvature , rotation , brightness , threshold , amount , distribution , monochromatic ) Apply the lens blur filter. fillOpacity () writable property The interior opacity of the layer. Range: 0.0 to 100.0. grouped () writable property If true, the layer is grouped with the layer below. isBackgroundLayer () writable property kind () writable property Sets the layer kind (such as \u2018text layer\u2019) for an empty layer. Valid only when the layer is empty and when isBackgroundLayer is false. You can use the \u2018kind \u2018 property to make a background layer a normal layer; however, to make a layer a background layer, you must set isBackgroundLayer to true. layerMaskDensity () writable property The density of the layer mask (between 0.0 and 100.0). layerMaskFeather () writable property The feather of the layer mask (between 0.0 and 250.0). linkedLayers () property Get all layers linked to this layer. Returns: list ( list ) \u2013 Layer objects opacity () writable property The master opacity of the layer. parent () writable property The object\u2019s container. pixelsLocked () writable property If true, the pixels in the layer\u2019s image cannot be edited. positionLocked () writable property within the layer. remove () Removes this layer from the document. textItem () writable property The text that is associated with the layer. Valid only when \u2018kind\u2019 is text layer. Returns: TextItem ( TextItem ) \u2013 unlink () Unlink this layer from any linked layers.","title":"artlayer"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer","text":"","title":"_artlayer"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer","text":"Bases: Photoshop An object within a document that contains the visual elements of the image (equivalent to a layer in the Adobe Photoshop application).","title":"ArtLayer"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustBrightnessContrast","text":"Adjusts the brightness and contrast. Parameters: brightness ( int ) \u2013 The brightness amount. Range: -100 to 100. contrast ( int ) \u2013 The contrast amount. Range: -100 to 100.","title":"adjustBrightnessContrast()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustColorBalance","text":"Adjusts the color balance of the layer\u2019s component channels. Parameters: shadows \u2013 The adjustments for the shadows. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. midtones \u2013 The adjustments for the midtones. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. highlights \u2013 The adjustments for the highlights. The array must include three values (in the range -100 to 100), which represent cyan or red, magenta or green, and yellow or blue, when the document mode is CMYK or RGB. preserveLuminosity \u2013 If true, luminosity is preserved.","title":"adjustColorBalance()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustCurves","text":"Adjusts the tonal range of the selected channel using up to fourteen points. Parameters: curveShape \u2013 The curve points. The number of points must be between 2 and 14.","title":"adjustCurves()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.adjustLevels","text":"Adjusts levels of the selected channels. Parameters: inputRangeStart \u2013 inputRangeEnd \u2013 inputRangeGamma \u2013 outputRangeStart \u2013 outputRangeEnd \u2013","title":"adjustLevels()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyAverage","text":"Applies the average filter.","title":"applyAverage()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyBlur","text":"Applies the blur filter.","title":"applyBlur()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyBlurMore","text":"Applies the blur more filter.","title":"applyBlurMore()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyClouds","text":"Applies the clouds filter.","title":"applyClouds()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyCustomFilter","text":"Applies the custom filter.","title":"applyCustomFilter()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDeInterlace","text":"Applies the de-interlace filter.","title":"applyDeInterlace()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDifferenceClouds","text":"Applies the difference clouds filter.","title":"applyDifferenceClouds()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDiffuseGlow","text":"Applies the diffuse glow filter. Parameters: graininess \u2013 The amount of graininess. Range: 0 to 10. amount \u2013 The glow amount. Range: 0 to 20. clear_amount \u2013 The clear amount. Range: 0 to 20.","title":"applyDiffuseGlow()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDisplace","text":"Applies the displace filter.","title":"applyDisplace()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyDustAndScratches","text":"Applies the dust and scratches filter.","title":"applyDustAndScratches()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyGaussianBlur","text":"Applies the gaussian blur filter.","title":"applyGaussianBlur()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyHighPass","text":"Applies the high pass filter.","title":"applyHighPass()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.applyLensBlur","text":"Apply the lens blur filter.","title":"applyLensBlur()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.fillOpacity","text":"The interior opacity of the layer. Range: 0.0 to 100.0.","title":"fillOpacity()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.grouped","text":"If true, the layer is grouped with the layer below.","title":"grouped()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.isBackgroundLayer","text":"","title":"isBackgroundLayer()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.kind","text":"Sets the layer kind (such as \u2018text layer\u2019) for an empty layer. Valid only when the layer is empty and when isBackgroundLayer is false. You can use the \u2018kind \u2018 property to make a background layer a normal layer; however, to make a layer a background layer, you must set isBackgroundLayer to true.","title":"kind()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.layerMaskDensity","text":"The density of the layer mask (between 0.0 and 100.0).","title":"layerMaskDensity()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.layerMaskFeather","text":"The feather of the layer mask (between 0.0 and 250.0).","title":"layerMaskFeather()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.linkedLayers","text":"Get all layers linked to this layer. Returns: list ( list ) \u2013 Layer objects","title":"linkedLayers()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.opacity","text":"The master opacity of the layer.","title":"opacity()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.pixelsLocked","text":"If true, the pixels in the layer\u2019s image cannot be edited.","title":"pixelsLocked()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.positionLocked","text":"within the layer.","title":"positionLocked()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.remove","text":"Removes this layer from the document.","title":"remove()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.textItem","text":"The text that is associated with the layer. Valid only when \u2018kind\u2019 is text layer. Returns: TextItem ( TextItem ) \u2013","title":"textItem()"},{"location":"reference/photoshop/api/_artlayer/#photoshop.api._artlayer.ArtLayer.unlink","text":"Unlink this layer from any linked layers.","title":"unlink()"},{"location":"reference/photoshop/api/_artlayers/","text":"photoshop.api._artlayers ArtLayers ( parent ) Bases: Photoshop The collection of art layer objects in the document. add () Adds an element. getByName ( name ) Get the first element in the collection with the provided name. Raises: PhotoshopPythonAPIError \u2013 Could not find a artLayer. removeAll () Deletes all elements.","title":"artlayers"},{"location":"reference/photoshop/api/_artlayers/#photoshop.api._artlayers","text":"","title":"_artlayers"},{"location":"reference/photoshop/api/_artlayers/#photoshop.api._artlayers.ArtLayers","text":"Bases: Photoshop The collection of art layer objects in the document.","title":"ArtLayers"},{"location":"reference/photoshop/api/_artlayers/#photoshop.api._artlayers.ArtLayers.add","text":"Adds an element.","title":"add()"},{"location":"reference/photoshop/api/_artlayers/#photoshop.api._artlayers.ArtLayers.getByName","text":"Get the first element in the collection with the provided name. Raises: PhotoshopPythonAPIError \u2013 Could not find a artLayer.","title":"getByName()"},{"location":"reference/photoshop/api/_artlayers/#photoshop.api._artlayers.ArtLayers.removeAll","text":"Deletes all elements.","title":"removeAll()"},{"location":"reference/photoshop/api/_channel/","text":"photoshop.api._channel","title":"channel"},{"location":"reference/photoshop/api/_channel/#photoshop.api._channel","text":"","title":"_channel"},{"location":"reference/photoshop/api/_channels/","text":"photoshop.api._channels","title":"channels"},{"location":"reference/photoshop/api/_channels/#photoshop.api._channels","text":"","title":"_channels"},{"location":"reference/photoshop/api/_core/","text":"photoshop.api._core This class provides all photoshop API core functions. Photoshop ( ps_version = None , parent = None ) Bases: object Core API for all photoshop objects. get_application_path () get_plugin_path () The absolute plugin path of Photoshop. get_presets_path () The absolute presets path of Photoshop. get_script_path () The absolute scripts path of Photoshop. open_key ( key ) staticmethod Open the register key. Parameters: key ( str ) \u2013 The key of register. Returns: str \u2013 The handle to the specified key. typename () property Current typename.","title":"core"},{"location":"reference/photoshop/api/_core/#photoshop.api._core","text":"This class provides all photoshop API core functions.","title":"_core"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop","text":"Bases: object Core API for all photoshop objects.","title":"Photoshop"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop.get_application_path","text":"","title":"get_application_path()"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop.get_plugin_path","text":"The absolute plugin path of Photoshop.","title":"get_plugin_path()"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop.get_presets_path","text":"The absolute presets path of Photoshop.","title":"get_presets_path()"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop.get_script_path","text":"The absolute scripts path of Photoshop.","title":"get_script_path()"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop.open_key","text":"Open the register key. Parameters: key ( str ) \u2013 The key of register. Returns: str \u2013 The handle to the specified key.","title":"open_key()"},{"location":"reference/photoshop/api/_core/#photoshop.api._core.Photoshop.typename","text":"Current typename.","title":"typename()"},{"location":"reference/photoshop/api/_document/","text":"photoshop.api._document The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method. Document ( parent ) Bases: Photoshop The active containment object for the layers and all other objects in the script. the basic canvas for the file. activeChannels () writable property The selected channels. activeHistoryBrushSource () property The history state to use with the history brush. activeHistoryState () property The current history state for this document. activeLayer () writable property The selected layer. autoCount ( * args , ** kwargs ) Counts the objects in the Document. backgroundLayer () property The background layer for the Document. bitsPerChannel () writable property The number of bits per channel. changeMode ( * args , ** kwargs ) Changes the mode of the Document. cloudDocument () property This document is in the cloud. cloudWorkAreaDirectory () property Local directory for this cloud document. colorProfileName () writable property The name of the color profile. Valid only when no value is specified for color profile kind (to indicate a custom color profile). colorProfileType () writable property The type of color model that defines the working space of the Document. colorSamplers () property The current color samplers associated with the Document. componentChannels () property The color component channels for this Document. countItems () property The current count items in the Document. crop ( bounds , angle = None , width = None , height = None ) Crops the document. Parameters: bounds ( List [ int ] ) \u2013 Four coordinates for the region remaining after cropping. angle ( Optional [ float ] ) \u2013 The angle of cropping bounds. width ( Optional [ int ] ) \u2013 The width of the resulting document. height ( Optional [ int ] ) \u2013 The height of the resulting document. exportDocument ( file_path , exportAs , options ) Exports the Document. Note This is a patched version, Due to the problem of dynamic binding, we cannot call it directly, so this command is executed by javascript. References https://stackoverflow.com/questions/12286761/saving-a-png-with-photoshop-script-not-working flatten () Flattens all layers. fullName () property The full path name of the Document. height () property The height of the Document. histogram () property A histogram showing the number of pixels at each color intensity level for the composite channel. history_states () property The history states collection in this Document. id () property The unique ID of this Document. info () property Metadata about the Document. layerComps () property The layer comps collection in this Document. layerSets () property The layer sets collection in the Document. layers () property The layers collection in the Document. managed () property If true, the Document is a workgroup Document. measurement_scale () property The measurement scale of the Document. mergeVisibleLayers () Flattens all visible layers in the Document. mode () property The color profile. name () property The Document name. parent () property The object's container. paste () Pastes contents of the clipboard into the Document. path () writable property The path to the Document. pixelAspectRatio () property The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000. print () Prints the document. printSettings () property Document print settings. quickMaskMode () property If true, the document is in Quick Mask mode. recordMeasurements ( source , dataPoints ) Records the measurements of document. resizeImage ( width , height , resolution = 72 , automatic = 8 ) Changes the size of the image. Parameters: width ( int ) \u2013 The desired width of the image. height ( int ) \u2013 The desired height of the image. resolution ( int ) \u2013 The resolution (in pixels per inch) automatic ( int ) \u2013 Value for automatic. resolution () property The resolution of the Document (in pixels per inch) reveal_all () Expands the Document to show clipped sections. save () Saves the Document. saveAs ( file_path , options , asCopy = True , extensionType = ExtensionType . Lowercase ) Saves the documents with the specified save options. Parameters: file_path ( str ) \u2013 Absolute path of psd file. options ( JPEGSaveOptions ) \u2013 Save options. asCopy ( bool ) \u2013 saved () property If true, the Document been saved since the last change. selection () property The selected area of the Document. splitChannels () Splits the channels of the document. suspendHistory ( historyString , javaScriptString ) Provides a single history state for the entire script. Allows a single undo for all actions taken in the script. trap ( width ) Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK. trim ( trim_type , top = True , left = True , bottom = True , right = True ) Trims the transparent area around the image on the specified sides of the canvas. Parameters: trim_type ( TrimType ) \u2013 The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels top ( Optional [ bool ] ) \u2013 If true, trims away the top of the document. left ( Optional [ bool ] ) \u2013 If true, trims away the left of the document. bottom ( Optional [ bool ] ) \u2013 If true, trims away the bottom of the document. right ( Optional [ bool ] ) \u2013 If true, trims away the right of the document. typename () property The class name of the object. xmpMetadata () property The XMP properties of the Document. The Camera RAW settings are stored here.","title":"document"},{"location":"reference/photoshop/api/_document/#photoshop.api._document","text":"The active containment object for layers and all other objects. The basic canvas for the file. Access the object for the currently active document through Application.activeDocument. You can access other documents or iterate through all open documents using in the Application.documents collection. You can access individual documents in the list by index, or use Documents.getByName() to retrieve them by name. Create documents programmatically using the Documents.add() method.","title":"_document"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document","text":"Bases: Photoshop The active containment object for the layers and all other objects in the script. the basic canvas for the file.","title":"Document"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.activeChannels","text":"The selected channels.","title":"activeChannels()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.activeHistoryBrushSource","text":"The history state to use with the history brush.","title":"activeHistoryBrushSource()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.activeHistoryState","text":"The current history state for this document.","title":"activeHistoryState()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.activeLayer","text":"The selected layer.","title":"activeLayer()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.autoCount","text":"Counts the objects in the Document.","title":"autoCount()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.backgroundLayer","text":"The background layer for the Document.","title":"backgroundLayer()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.bitsPerChannel","text":"The number of bits per channel.","title":"bitsPerChannel()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.changeMode","text":"Changes the mode of the Document.","title":"changeMode()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.cloudDocument","text":"This document is in the cloud.","title":"cloudDocument()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.cloudWorkAreaDirectory","text":"Local directory for this cloud document.","title":"cloudWorkAreaDirectory()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.colorProfileName","text":"The name of the color profile. Valid only when no value is specified for color profile kind (to indicate a custom color profile).","title":"colorProfileName()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.colorProfileType","text":"The type of color model that defines the working space of the Document.","title":"colorProfileType()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.colorSamplers","text":"The current color samplers associated with the Document.","title":"colorSamplers()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.componentChannels","text":"The color component channels for this Document.","title":"componentChannels()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.countItems","text":"The current count items in the Document.","title":"countItems()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.crop","text":"Crops the document. Parameters: bounds ( List [ int ] ) \u2013 Four coordinates for the region remaining after cropping. angle ( Optional [ float ] ) \u2013 The angle of cropping bounds. width ( Optional [ int ] ) \u2013 The width of the resulting document. height ( Optional [ int ] ) \u2013 The height of the resulting document.","title":"crop()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.exportDocument","text":"Exports the Document. Note This is a patched version, Due to the problem of dynamic binding, we cannot call it directly, so this command is executed by javascript. References https://stackoverflow.com/questions/12286761/saving-a-png-with-photoshop-script-not-working","title":"exportDocument()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.flatten","text":"Flattens all layers.","title":"flatten()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.fullName","text":"The full path name of the Document.","title":"fullName()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.height","text":"The height of the Document.","title":"height()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.histogram","text":"A histogram showing the number of pixels at each color intensity level for the composite channel.","title":"histogram()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.history_states","text":"The history states collection in this Document.","title":"history_states()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.id","text":"The unique ID of this Document.","title":"id()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.info","text":"Metadata about the Document.","title":"info()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.layerComps","text":"The layer comps collection in this Document.","title":"layerComps()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.layerSets","text":"The layer sets collection in the Document.","title":"layerSets()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.layers","text":"The layers collection in the Document.","title":"layers()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.managed","text":"If true, the Document is a workgroup Document.","title":"managed()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.measurement_scale","text":"The measurement scale of the Document.","title":"measurement_scale()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.mergeVisibleLayers","text":"Flattens all visible layers in the Document.","title":"mergeVisibleLayers()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.mode","text":"The color profile.","title":"mode()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.name","text":"The Document name.","title":"name()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.parent","text":"The object's container.","title":"parent()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.paste","text":"Pastes contents of the clipboard into the Document.","title":"paste()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.path","text":"The path to the Document.","title":"path()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.pixelAspectRatio","text":"The (custom) pixel aspect ratio of the Document. Range: 0.100 to 10.000.","title":"pixelAspectRatio()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.print","text":"Prints the document.","title":"print()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.printSettings","text":"Document print settings.","title":"printSettings()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.quickMaskMode","text":"If true, the document is in Quick Mask mode.","title":"quickMaskMode()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.recordMeasurements","text":"Records the measurements of document.","title":"recordMeasurements()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.resizeImage","text":"Changes the size of the image. Parameters: width ( int ) \u2013 The desired width of the image. height ( int ) \u2013 The desired height of the image. resolution ( int ) \u2013 The resolution (in pixels per inch) automatic ( int ) \u2013 Value for automatic.","title":"resizeImage()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.resolution","text":"The resolution of the Document (in pixels per inch)","title":"resolution()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.reveal_all","text":"Expands the Document to show clipped sections.","title":"reveal_all()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.save","text":"Saves the Document.","title":"save()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.saveAs","text":"Saves the documents with the specified save options. Parameters: file_path ( str ) \u2013 Absolute path of psd file. options ( JPEGSaveOptions ) \u2013 Save options. asCopy ( bool ) \u2013","title":"saveAs()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.saved","text":"If true, the Document been saved since the last change.","title":"saved()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.selection","text":"The selected area of the Document.","title":"selection()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.splitChannels","text":"Splits the channels of the document.","title":"splitChannels()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.suspendHistory","text":"Provides a single history state for the entire script. Allows a single undo for all actions taken in the script.","title":"suspendHistory()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.trap","text":"Applies trapping to a CMYK document. Valid only when \u2018mode\u2019 = CMYK.","title":"trap()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.trim","text":"Trims the transparent area around the image on the specified sides of the canvas. Parameters: trim_type ( TrimType ) \u2013 The color or type of pixels to base the trim on. Examples: - TrimType.BottomRightPixel - TrimType.TopLeftPixel - TrimType.TransparentPixels top ( Optional [ bool ] ) \u2013 If true, trims away the top of the document. left ( Optional [ bool ] ) \u2013 If true, trims away the left of the document. bottom ( Optional [ bool ] ) \u2013 If true, trims away the bottom of the document. right ( Optional [ bool ] ) \u2013 If true, trims away the right of the document.","title":"trim()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.typename","text":"The class name of the object.","title":"typename()"},{"location":"reference/photoshop/api/_document/#photoshop.api._document.Document.xmpMetadata","text":"The XMP properties of the Document. The Camera RAW settings are stored here.","title":"xmpMetadata()"},{"location":"reference/photoshop/api/_documentinfo/","text":"photoshop.api._documentinfo Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application. DocumentInfo ( parent ) Bases: Photoshop Metadata about a document object. author () writable property authorPosition () writable property category () writable property copyrightNotice () writable property copyrighted () writable property credit () writable property provinceState () writable property supplementalCategories () writable property transmissionReference () writable property urgency () writable property The document urgency.","title":"documentinfo"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo","text":"Metadata about a document object. These values can be set by selecting File > File Info in the Adobe Photoshop application.","title":"_documentinfo"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo","text":"Bases: Photoshop Metadata about a document object.","title":"DocumentInfo"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.author","text":"","title":"author()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.authorPosition","text":"","title":"authorPosition()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.category","text":"","title":"category()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.copyrightNotice","text":"","title":"copyrightNotice()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.copyrighted","text":"","title":"copyrighted()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.credit","text":"","title":"credit()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.provinceState","text":"","title":"provinceState()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.supplementalCategories","text":"","title":"supplementalCategories()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.transmissionReference","text":"","title":"transmissionReference()"},{"location":"reference/photoshop/api/_documentinfo/#photoshop.api._documentinfo.DocumentInfo.urgency","text":"The document urgency.","title":"urgency()"},{"location":"reference/photoshop/api/_documents/","text":"photoshop.api._documents Documents ( parent ) Bases: Photoshop The collection of open documents. add ( width = 960 , height = 540 , resolution = 72.0 , name = None , mode = NewDocumentMode . NewRGB , initialFill = DocumentFill . White , pixelAspectRatio = 1.0 , bitsPerChannel = BitsPerChannelType . Document8Bits , colorProfileName = None ) Creates a new document object and adds it to this collections. Parameters: width ( int ) \u2013 The width of the document. height ( int ) \u2013 The height of the document. resolution ( int ) \u2013 The resolution of the document (in pixels per inch) name ( str ) \u2013 The name of the document. mode \u2013 The document mode. initialFill \u2013 The initial fill of the document. pixelAspectRatio ( float ) \u2013 The initial pixel aspect ratio of the document. Default is 1.0 , the range is 0.1-10.00 . bitsPerChannel ( int ) \u2013 The number of bits per channel. colorProfileName ( str ) \u2013 The name of color profile for document. Returns: Document \u2013 .Document: Document instance. getByName ( document_name ) Get document by given document name.","title":"documents"},{"location":"reference/photoshop/api/_documents/#photoshop.api._documents","text":"","title":"_documents"},{"location":"reference/photoshop/api/_documents/#photoshop.api._documents.Documents","text":"Bases: Photoshop The collection of open documents.","title":"Documents"},{"location":"reference/photoshop/api/_documents/#photoshop.api._documents.Documents.add","text":"Creates a new document object and adds it to this collections. Parameters: width ( int ) \u2013 The width of the document. height ( int ) \u2013 The height of the document. resolution ( int ) \u2013 The resolution of the document (in pixels per inch) name ( str ) \u2013 The name of the document. mode \u2013 The document mode. initialFill \u2013 The initial fill of the document. pixelAspectRatio ( float ) \u2013 The initial pixel aspect ratio of the document. Default is 1.0 , the range is 0.1-10.00 . bitsPerChannel ( int ) \u2013 The number of bits per channel. colorProfileName ( str ) \u2013 The name of color profile for document. Returns: Document \u2013 .Document: Document instance.","title":"add()"},{"location":"reference/photoshop/api/_documents/#photoshop.api._documents.Documents.getByName","text":"Get document by given document name.","title":"getByName()"},{"location":"reference/photoshop/api/_layerComp/","text":"photoshop.api._layerComp LayerComp ( parent ) Bases: Photoshop A snapshot of a state of the layers in a document (can be used to view different page layouts or compostions). apply () Applies the layer comp to the document. recapture () Recaptures the current layer state(s) for this layer comp. remove () Deletes the layerComp object. resetfromComp () Resets the layer comp state to thedocument state. selected () writable property True if the layer comp is currently selected. visibility () writable property True to use layer visibility settings.","title":"layerComp"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp","text":"","title":"_layerComp"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp","text":"Bases: Photoshop A snapshot of a state of the layers in a document (can be used to view different page layouts or compostions).","title":"LayerComp"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp.apply","text":"Applies the layer comp to the document.","title":"apply()"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp.recapture","text":"Recaptures the current layer state(s) for this layer comp.","title":"recapture()"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp.remove","text":"Deletes the layerComp object.","title":"remove()"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp.resetfromComp","text":"Resets the layer comp state to thedocument state.","title":"resetfromComp()"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp.selected","text":"True if the layer comp is currently selected.","title":"selected()"},{"location":"reference/photoshop/api/_layerComp/#photoshop.api._layerComp.LayerComp.visibility","text":"True to use layer visibility settings.","title":"visibility()"},{"location":"reference/photoshop/api/_layerComps/","text":"photoshop.api._layerComps LayerComps ( parent ) Bases: Photoshop The layer comps collection in this document.","title":"layerComps"},{"location":"reference/photoshop/api/_layerComps/#photoshop.api._layerComps","text":"","title":"_layerComps"},{"location":"reference/photoshop/api/_layerComps/#photoshop.api._layerComps.LayerComps","text":"Bases: Photoshop The layer comps collection in this document.","title":"LayerComps"},{"location":"reference/photoshop/api/_layerSet/","text":"photoshop.api._layerSet LayerSet ( parent ) Bases: Photoshop A group of layer objects, which can include art layer objects and other (nested) layer set objects. A single command or set of commands manipulates all layers in a layer set object. add () Adds an element. bounds () property The bounding rectangle of the layer set. linkedLayers () property The layers linked to this layerSet object. merge () Merges the layer set. opacity () writable property The master opacity of the set. remove () Remove this layer set from the document. translate ( delta_x , delta_y ) Moves the position relative to its current position. unlink () Unlinks the layer set.","title":"layerSet"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet","text":"","title":"_layerSet"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet","text":"Bases: Photoshop A group of layer objects, which can include art layer objects and other (nested) layer set objects. A single command or set of commands manipulates all layers in a layer set object.","title":"LayerSet"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.add","text":"Adds an element.","title":"add()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.bounds","text":"The bounding rectangle of the layer set.","title":"bounds()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.linkedLayers","text":"The layers linked to this layerSet object.","title":"linkedLayers()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.merge","text":"Merges the layer set.","title":"merge()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.opacity","text":"The master opacity of the set.","title":"opacity()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.remove","text":"Remove this layer set from the document.","title":"remove()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.translate","text":"Moves the position relative to its current position.","title":"translate()"},{"location":"reference/photoshop/api/_layerSet/#photoshop.api._layerSet.LayerSet.unlink","text":"Unlinks the layer set.","title":"unlink()"},{"location":"reference/photoshop/api/_layerSets/","text":"photoshop.api._layerSets LayerSets ( parent ) Bases: Photoshop The layer sets collection in the document. getByName ( name ) Get the first element in the collection with the provided name. length () property Number of elements in the collection.","title":"layerSets"},{"location":"reference/photoshop/api/_layerSets/#photoshop.api._layerSets","text":"","title":"_layerSets"},{"location":"reference/photoshop/api/_layerSets/#photoshop.api._layerSets.LayerSets","text":"Bases: Photoshop The layer sets collection in the document.","title":"LayerSets"},{"location":"reference/photoshop/api/_layerSets/#photoshop.api._layerSets.LayerSets.getByName","text":"Get the first element in the collection with the provided name.","title":"getByName()"},{"location":"reference/photoshop/api/_layerSets/#photoshop.api._layerSets.LayerSets.length","text":"Number of elements in the collection.","title":"length()"},{"location":"reference/photoshop/api/_layers/","text":"photoshop.api._layers Layers ( parent ) Bases: Photoshop The layers collection in the document. getByName ( name ) Get the first element in the collection with the provided name. removeAll () Deletes all elements.","title":"layers"},{"location":"reference/photoshop/api/_layers/#photoshop.api._layers","text":"","title":"_layers"},{"location":"reference/photoshop/api/_layers/#photoshop.api._layers.Layers","text":"Bases: Photoshop The layers collection in the document.","title":"Layers"},{"location":"reference/photoshop/api/_layers/#photoshop.api._layers.Layers.getByName","text":"Get the first element in the collection with the provided name.","title":"getByName()"},{"location":"reference/photoshop/api/_layers/#photoshop.api._layers.Layers.removeAll","text":"Deletes all elements.","title":"removeAll()"},{"location":"reference/photoshop/api/_measurement_log/","text":"photoshop.api._measurement_log MeasurementLog ( parent ) Bases: Photoshop The log of measurements taken.","title":"measurement_log"},{"location":"reference/photoshop/api/_measurement_log/#photoshop.api._measurement_log","text":"","title":"_measurement_log"},{"location":"reference/photoshop/api/_measurement_log/#photoshop.api._measurement_log.MeasurementLog","text":"Bases: Photoshop The log of measurements taken.","title":"MeasurementLog"},{"location":"reference/photoshop/api/_notifier/","text":"photoshop.api._notifier The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property Notifier ( parent = None ) Bases: Photoshop event () property The event identifier, a four-character code or a unique string. eventClass () property The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects. eventFile () property The path to the file to execute when the event occurs and activates the notifier. remove () Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information.","title":"notifier"},{"location":"reference/photoshop/api/_notifier/#photoshop.api._notifier","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. For example: var notRef = app.notifiers.add(\"OnClickGoButton\", eventFile) Notifiers must be enabled using the Application.notifiersEnabled property","title":"_notifier"},{"location":"reference/photoshop/api/_notifier/#photoshop.api._notifier.Notifier","text":"Bases: Photoshop","title":"Notifier"},{"location":"reference/photoshop/api/_notifier/#photoshop.api._notifier.Notifier.event","text":"The event identifier, a four-character code or a unique string.","title":"event()"},{"location":"reference/photoshop/api/_notifier/#photoshop.api._notifier.Notifier.eventClass","text":"The class identifier, a four-character code or a unique string. When an event applies to multiple types of objects, use this propery to distinguish which object this notifier applies to. For example, the Make event (\"Mk \") can apply to documents (\"Dcmn\"), channels (\"Chnl\") and other objects.","title":"eventClass()"},{"location":"reference/photoshop/api/_notifier/#photoshop.api._notifier.Notifier.eventFile","text":"The path to the file to execute when the event occurs and activates the notifier.","title":"eventFile()"},{"location":"reference/photoshop/api/_notifier/#photoshop.api._notifier.Notifier.remove","text":"Deletes this object. You can also remove a Notifier object from the Script Events Manager drop-down list by deleting the file named Script Events Manager.xml from the Photoshop preferences folder. See Adobe Photoshop CC help for more information.","title":"remove()"},{"location":"reference/photoshop/api/_notifiers/","text":"photoshop.api._notifiers The collection of Notifier objects in the document. Access through the Application.notifiers collection property. Examples: Notifiers must be enabled using the Application.notifiersEnabled property. var notRef = app . notifiers . add ( \"OnClickGoButton\" , eventFile ) Notifiers ( parent = None ) Bases: Photoshop The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers"},{"location":"reference/photoshop/api/_notifiers/#photoshop.api._notifiers","text":"The collection of Notifier objects in the document. Access through the Application.notifiers collection property. Examples: Notifiers must be enabled using the Application.notifiersEnabled property. var notRef = app . notifiers . add ( \"OnClickGoButton\" , eventFile )","title":"_notifiers"},{"location":"reference/photoshop/api/_notifiers/#photoshop.api._notifiers.Notifiers","text":"Bases: Photoshop The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"Notifiers"},{"location":"reference/photoshop/api/_preferences/","text":"photoshop.api._preferences Preferences ( parent ) Bases: Photoshop The application preference settings. additionalPluginFolder () property The path to an additional plug-in folder. autoUpdateOpenDocuments () writable property True to automatically update open documents. beepWhenDone () writable property True to beep when a process. colorChannelsInColor () writable property True to display component channels in the Channels palette in color. colorPicker () writable property The preferred color selection tool. createFirstSnapshot () writable property Automatically make the first snapshot when a new document is created. editLogItems () writable property The preferred level of detail in the history log. exportClipboard () writable property Retain Photoshop contents on the clipboard after exit the app.","title":"preferences"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences","text":"","title":"_preferences"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences","text":"Bases: Photoshop The application preference settings.","title":"Preferences"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.additionalPluginFolder","text":"The path to an additional plug-in folder.","title":"additionalPluginFolder()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.autoUpdateOpenDocuments","text":"True to automatically update open documents.","title":"autoUpdateOpenDocuments()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.beepWhenDone","text":"True to beep when a process.","title":"beepWhenDone()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.colorChannelsInColor","text":"True to display component channels in the Channels palette in color.","title":"colorChannelsInColor()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.colorPicker","text":"The preferred color selection tool.","title":"colorPicker()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.createFirstSnapshot","text":"Automatically make the first snapshot when a new document is created.","title":"createFirstSnapshot()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.editLogItems","text":"The preferred level of detail in the history log.","title":"editLogItems()"},{"location":"reference/photoshop/api/_preferences/#photoshop.api._preferences.Preferences.exportClipboard","text":"Retain Photoshop contents on the clipboard after exit the app.","title":"exportClipboard()"},{"location":"reference/photoshop/api/_selection/","text":"photoshop.api._selection The selected area of the document or layer. Selection ( parent = None ) Bases: Photoshop The selected area of the document. clear () Clears the selection and does not copy it to the clipboard. contract ( contract_by ) Contracts the selection. copy () Copies the selection to the clipboard. cut () Cuts the current selection to the clipboard. deselect () Deselects the current selection. expand ( by ) Expands the selection. Parameters: by ( int ) \u2013 The amount to expand the selection. feather ( by ) Feathers the edges of the selection. Parameters: by ( int ) \u2013 The amount to feather the edge. fill ( fill_type , mode = None , opacity = None , preserve_transparency = None ) Fills the selection. grow ( tolerance , anti_alias ) Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: tolerance ( int ) \u2013 The tolerance range. Range: 0 to 255. anti_alias ( bool ) \u2013 If true, anti-aliasing is used. invert () Inverts the selection. load ( from_channel , combination , inverting ) Loads the selection from the specified channel. makeWorkPath ( tolerance ) Makes this selection item the workpath for this document. resize ( horizontal , vertical , anchor ) Resizes the selected area to the specified dimensions and anchor position. resizeBoundary ( horizontal , vertical , anchor ) Scales the boundary of the selection. rotate ( angle , anchor ) Rotates the object. rotateBoundary ( angle , anchor ) Rotates the boundary of the selection. selectBorder ( width ) Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: width ( int ) \u2013 The width of the border selection. smooth ( radius ) Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels). store ( into , combination = SelectionType . ReplaceSelection ) Saves the selection as a channel. stroke ( strokeColor , width , location , mode , opacity , preserveTransparency ) Strokes the selection. Parameters: strokeColor ( SolidColor ) \u2013 The color to stroke the selection with. width ( int ) \u2013 The stroke width. location ( int ) \u2013 The stroke location. mode ( int ) \u2013 The color blend mode. opacity ( int ) \u2013 The opacity of the stroke color as a percentage. Range: 1 to 100. preserveTransparency ( bool ) \u2013 If true, preserves transparency. translate ( deltaX , deltaY ) Moves the object relative to its current position. translateBoundary ( deltaX , deltaY ) Moves the boundary of selection relative to its current position.","title":"selection"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection","text":"The selected area of the document or layer.","title":"_selection"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection","text":"Bases: Photoshop The selected area of the document.","title":"Selection"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.clear","text":"Clears the selection and does not copy it to the clipboard.","title":"clear()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.contract","text":"Contracts the selection.","title":"contract()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.copy","text":"Copies the selection to the clipboard.","title":"copy()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.cut","text":"Cuts the current selection to the clipboard.","title":"cut()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.deselect","text":"Deselects the current selection.","title":"deselect()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.expand","text":"Expands the selection. Parameters: by ( int ) \u2013 The amount to expand the selection.","title":"expand()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.feather","text":"Feathers the edges of the selection. Parameters: by ( int ) \u2013 The amount to feather the edge.","title":"feather()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.fill","text":"Fills the selection.","title":"fill()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.grow","text":"Grows the selection to include all adjacent pixels falling within The specified tolerance range. Parameters: tolerance ( int ) \u2013 The tolerance range. Range: 0 to 255. anti_alias ( bool ) \u2013 If true, anti-aliasing is used.","title":"grow()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.invert","text":"Inverts the selection.","title":"invert()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.load","text":"Loads the selection from the specified channel.","title":"load()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.makeWorkPath","text":"Makes this selection item the workpath for this document.","title":"makeWorkPath()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.resize","text":"Resizes the selected area to the specified dimensions and anchor position.","title":"resize()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.resizeBoundary","text":"Scales the boundary of the selection.","title":"resizeBoundary()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.rotate","text":"Rotates the object.","title":"rotate()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.rotateBoundary","text":"Rotates the boundary of the selection.","title":"rotateBoundary()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.selectBorder","text":"Selects the selection border only (in the specified width); subsequent actions do not affect the selected area within the borders. Parameters: width ( int ) \u2013 The width of the border selection.","title":"selectBorder()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.smooth","text":"Cleans up stray pixels left inside or outside a color-based selection (within the radius specified in pixels).","title":"smooth()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.store","text":"Saves the selection as a channel.","title":"store()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.stroke","text":"Strokes the selection. Parameters: strokeColor ( SolidColor ) \u2013 The color to stroke the selection with. width ( int ) \u2013 The stroke width. location ( int ) \u2013 The stroke location. mode ( int ) \u2013 The color blend mode. opacity ( int ) \u2013 The opacity of the stroke color as a percentage. Range: 1 to 100. preserveTransparency ( bool ) \u2013 If true, preserves transparency.","title":"stroke()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.translate","text":"Moves the object relative to its current position.","title":"translate()"},{"location":"reference/photoshop/api/_selection/#photoshop.api._selection.Selection.translateBoundary","text":"Moves the boundary of selection relative to its current position.","title":"translateBoundary()"},{"location":"reference/photoshop/api/_text_fonts/","text":"photoshop.api._text_fonts TextFonts ( parent = None ) Bases: Photoshop An installed font. getByName ( name ) Gets the font by the font name. Parameters: name ( str ) \u2013 The name of the font. Returns: TextFont \u2013 font instance. length () property The number pf elements in the collection.","title":"text_fonts"},{"location":"reference/photoshop/api/_text_fonts/#photoshop.api._text_fonts","text":"","title":"_text_fonts"},{"location":"reference/photoshop/api/_text_fonts/#photoshop.api._text_fonts.TextFonts","text":"Bases: Photoshop An installed font.","title":"TextFonts"},{"location":"reference/photoshop/api/_text_fonts/#photoshop.api._text_fonts.TextFonts.getByName","text":"Gets the font by the font name. Parameters: name ( str ) \u2013 The name of the font. Returns: TextFont \u2013 font instance.","title":"getByName()"},{"location":"reference/photoshop/api/_text_fonts/#photoshop.api._text_fonts.TextFonts.length","text":"The number pf elements in the collection.","title":"length()"},{"location":"reference/photoshop/api/action_descriptor/","text":"photoshop.api.action_descriptor A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide. ActionDescriptor () Bases: Photoshop A record of key-value pairs for actions, such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide. clear () Clears the descriptor. count () property The number of keys contained in the descriptor. erase ( key ) Erases a key form the descriptor. fromStream ( value ) Create a descriptor from a stream of bytes. for reading from disk. getBoolean ( key ) Gets the text_font of a key of type boolean. Parameters: key ( str ) \u2013 key of type boolean. Returns: bool ( int ) \u2013 The text_font of a key of type boolean. getClass ( key ) Gets the text_font of a key of type class. Parameters: key ( str ) \u2013 The key of type class. Returns: int \u2013 The text_font of a key of type class. getData ( key ) Gets raw byte data as a string value. getDouble ( key ) Gets the value of a key of type double. getEnumerationType ( index ) Gets the enumeration type of a key. getEnumerationValue ( index ) Gets the enumeration value of a key. getInteger ( index ) Gets the value of a key of type integer. getKey ( index ) Gets the ID of the key provided by index. getLargeInteger ( index ) Gets the value of a key of type large integer. getList ( index ) Gets the value of a key of type list. getObjectType ( key ) Gets the class ID of an object in a key of type object. getObjectValue ( key ) Get the class ID of an object in a key of type object. getPath ( key ) Gets the value of a key of type. getReference ( key ) Gets the value of a key of type. getString ( key ) Gets the value of a key of type. getType ( key ) Gets the type of a key. getUnitDoubleType ( key ) Gets the unit type of a key of type UnitDouble. getUnitDoubleValue ( key ) Gets the unit type of a key of type UnitDouble. hasKey ( key ) Checks whether the descriptor contains the provided key. isEqual ( otherDesc ) Determines whether the descriptor is the same as another descriptor. Parameters: otherDesc ( .action_descriptor.ActionDescriptor ) \u2013 putBoolean ( key , value ) Sets the value for a key whose type is boolean. putClass ( key , value ) Sets the value for a key whose type is class. putData ( key , value ) Puts raw byte data as a string value. putDouble ( key , value ) Sets the value for a key whose type is double. putEnumerated ( key , enum_type , value ) Sets the enumeration type and value for a key. putInteger ( key , value ) Sets the value for a key whose type is integer. putLargeInteger ( key , value ) Sets the value for a key whose type is large integer. putList ( key , value ) Sets the value for a key whose type is an ActionList object. putObject ( key , class_id , value ) Sets the value for a key whose type is an object. putPath ( key , value ) Sets the value for a key whose type is path. putReference ( key , value ) Sets the value for a key whose type is an object reference. putString ( key , value ) Sets the value for a key whose type is string. putUnitDouble ( key , unit_id , value ) Sets the value for a key whose type is a unit value formatted as double. toStream () Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"action_descriptor"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor","text":"A record of key-text_font pairs for actions. such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide.","title":"action_descriptor"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor","text":"Bases: Photoshop A record of key-value pairs for actions, such as those included on the Adobe Photoshop Actions menu. The ActionDescriptor class is part of the Action Manager functionality. For more details on the Action Manager, see the Photoshop Scripting Guide.","title":"ActionDescriptor"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.clear","text":"Clears the descriptor.","title":"clear()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.count","text":"The number of keys contained in the descriptor.","title":"count()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.erase","text":"Erases a key form the descriptor.","title":"erase()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.fromStream","text":"Create a descriptor from a stream of bytes. for reading from disk.","title":"fromStream()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getBoolean","text":"Gets the text_font of a key of type boolean. Parameters: key ( str ) \u2013 key of type boolean. Returns: bool ( int ) \u2013 The text_font of a key of type boolean.","title":"getBoolean()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getClass","text":"Gets the text_font of a key of type class. Parameters: key ( str ) \u2013 The key of type class. Returns: int \u2013 The text_font of a key of type class.","title":"getClass()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getData","text":"Gets raw byte data as a string value.","title":"getData()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getDouble","text":"Gets the value of a key of type double.","title":"getDouble()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationType","text":"Gets the enumeration type of a key.","title":"getEnumerationType()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getEnumerationValue","text":"Gets the enumeration value of a key.","title":"getEnumerationValue()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getInteger","text":"Gets the value of a key of type integer.","title":"getInteger()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getKey","text":"Gets the ID of the key provided by index.","title":"getKey()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getLargeInteger","text":"Gets the value of a key of type large integer.","title":"getLargeInteger()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getList","text":"Gets the value of a key of type list.","title":"getList()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getObjectType","text":"Gets the class ID of an object in a key of type object.","title":"getObjectType()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getObjectValue","text":"Get the class ID of an object in a key of type object.","title":"getObjectValue()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getPath","text":"Gets the value of a key of type.","title":"getPath()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getReference","text":"Gets the value of a key of type.","title":"getReference()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getString","text":"Gets the value of a key of type.","title":"getString()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getType","text":"Gets the type of a key.","title":"getType()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleType","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleType()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.getUnitDoubleValue","text":"Gets the unit type of a key of type UnitDouble.","title":"getUnitDoubleValue()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.hasKey","text":"Checks whether the descriptor contains the provided key.","title":"hasKey()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.isEqual","text":"Determines whether the descriptor is the same as another descriptor. Parameters: otherDesc ( .action_descriptor.ActionDescriptor ) \u2013","title":"isEqual()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putBoolean","text":"Sets the value for a key whose type is boolean.","title":"putBoolean()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putClass","text":"Sets the value for a key whose type is class.","title":"putClass()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putData","text":"Puts raw byte data as a string value.","title":"putData()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putDouble","text":"Sets the value for a key whose type is double.","title":"putDouble()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putEnumerated","text":"Sets the enumeration type and value for a key.","title":"putEnumerated()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putInteger","text":"Sets the value for a key whose type is integer.","title":"putInteger()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putLargeInteger","text":"Sets the value for a key whose type is large integer.","title":"putLargeInteger()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putList","text":"Sets the value for a key whose type is an ActionList object.","title":"putList()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putObject","text":"Sets the value for a key whose type is an object.","title":"putObject()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putPath","text":"Sets the value for a key whose type is path.","title":"putPath()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putReference","text":"Sets the value for a key whose type is an object reference.","title":"putReference()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putString","text":"Sets the value for a key whose type is string.","title":"putString()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.putUnitDouble","text":"Sets the value for a key whose type is a unit value formatted as double.","title":"putUnitDouble()"},{"location":"reference/photoshop/api/action_descriptor/#photoshop.api.action_descriptor.ActionDescriptor.toStream","text":"Gets the entire descriptor as as stream of bytes, for writing to disk.","title":"toStream()"},{"location":"reference/photoshop/api/action_list/","text":"photoshop.api.action_list This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop. ActionList ( parent = None ) Bases: Photoshop The list of commands that comprise an Action. (such as an Action created using the Actions palette in the Adobe Photoshop application). The action list object is part of the Action Manager functionality. For details on using the Action Manager, see the Photoshop Scripting Guide.","title":"action_list"},{"location":"reference/photoshop/api/action_list/#photoshop.api.action_list","text":"This object provides an array-style mechanism for storing data. It can be used for low-level access info Photoshop.","title":"action_list"},{"location":"reference/photoshop/api/action_list/#photoshop.api.action_list.ActionList","text":"Bases: Photoshop The list of commands that comprise an Action. (such as an Action created using the Actions palette in the Adobe Photoshop application). The action list object is part of the Action Manager functionality. For details on using the Action Manager, see the Photoshop Scripting Guide.","title":"ActionList"},{"location":"reference/photoshop/api/action_reference/","text":"photoshop.api.action_reference This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor. ActionReference ( parent = None ) Bases: Photoshop Contains data describing a referenced Action. The action reference object is part of the Action Manager functionality. For details on using the Action Manager, see the Photoshop Scripting Guide. getForm () Gets the form of this action reference. getIdentifier () Gets the identifier value for a reference whose form is identifier. getIndex () Gets the index value for a reference in a list or array, putEnumerated ( desired_class , enum_type , value ) Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"action_reference"},{"location":"reference/photoshop/api/action_reference/#photoshop.api.action_reference","text":"This object provides information about what the action is refering to. For example, when referring to the name of something you might use keyName. The reference would also need to know what name you are referring to. In this case you could use classDocument for the name of the document or classLayer for the name of the layer. It can be used for low-level access into Contains data associated with an ActionDescriptor.","title":"action_reference"},{"location":"reference/photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference","text":"Bases: Photoshop Contains data describing a referenced Action. The action reference object is part of the Action Manager functionality. For details on using the Action Manager, see the Photoshop Scripting Guide.","title":"ActionReference"},{"location":"reference/photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.getForm","text":"Gets the form of this action reference.","title":"getForm()"},{"location":"reference/photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.getIdentifier","text":"Gets the identifier value for a reference whose form is identifier.","title":"getIdentifier()"},{"location":"reference/photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.getIndex","text":"Gets the index value for a reference in a list or array,","title":"getIndex()"},{"location":"reference/photoshop/api/action_reference/#photoshop.api.action_reference.ActionReference.putEnumerated","text":"Puts an enumeration type and ID into a reference along with the desired class for the reference.","title":"putEnumerated()"},{"location":"reference/photoshop/api/application/","text":"photoshop.api.application The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\") Application ( version = None ) Bases: Photoshop The Adobe Photoshop application object, which contains all other Adobe Photoshop objects. This is the root of the object model, and provides access to all other objects. To access the properties and methods, you can use the pre-defined global variable app. activeDocument () writable property The frontmost documents. Setting this property is equivalent to clicking an open document in the Adobe Photoshop CC application to bring it to the front of the screen. backgroundColor () writable property The default background color and color style for documents. batch ( files , actionName , actionSet , options ) Runs the batch automation routine. Similar to the File > Automate > Batch command. beep () Causes a \"beep\" sound. build () property changeProgressText ( text ) Changes the text that appears in the progress window. colorSettings () writable property The name of the current color settings. as selected with Edit > Color Settings. currentTool () writable property displayDialogs () writable property The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs. doAction ( action , action_from = 'Default Actions' ) Plays the specified action from the Actions palette. doProgress ( title , javascript ) Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: title ( str ) \u2013 String to show in the progress window. javascript ( str ) \u2013 JavaScriptString to execute. doProgressTask ( index , javascript ) Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel. documents () property ._documents.Documents: The Documents instance. eraseCustomOptions ( key ) Removes the specified user objects from the Photoshop registry. featureEnabled ( name ) Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial foregroundColor () writable property Get default foreground color. Used to paint, fill, and stroke selections. Returns: SolidColor \u2013 The SolidColor instance. freeMemory () property The amount of unused memory available to . getCustomOptions ( key ) Retrieves user objects in the Photoshop registry for the ID with value key. load ( document_file_path ) Loads a support document. locale () property The language locale of the application. macintoshFileTypes () property A list of the image file types Photoshop can open. measurementLog () property The log of measurements taken. notifiers () property The notifiers currently configured (in the Scripts Events Manager menu in the application). notifiersEnabled () writable property If true, notifiers are enabled. parent () property The object\u2019s container. path () property playbackParameters () writable property Stores and retrieves parameters used as part of a recorded action. purge ( target ) Purges one or more caches. Parameters: target \u2013 .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache. refresh () Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method. refreshFonts () Force the font list to get refreshed. runMenuItem ( menu_id ) Run a menu item given the menu ID. showColorPicker () Returns false if dialog is cancelled, true otherwise. togglePalettes () Toggle palette visibility.","title":"application"},{"location":"reference/photoshop/api/application/#photoshop.api.application","text":"The Adobe Adobe Photoshop CC application object. Which is the root of the object model and provides access to all other objects. This object provides application-wide information, such as application defaults and available fonts. It provides many important methods, such as those for opening files and loading documents. app = Application() app.documents.add(800, 600, 72, \"docRef\")","title":"application"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application","text":"Bases: Photoshop The Adobe Photoshop application object, which contains all other Adobe Photoshop objects. This is the root of the object model, and provides access to all other objects. To access the properties and methods, you can use the pre-defined global variable app.","title":"Application"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.activeDocument","text":"The frontmost documents. Setting this property is equivalent to clicking an open document in the Adobe Photoshop CC application to bring it to the front of the screen.","title":"activeDocument()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.backgroundColor","text":"The default background color and color style for documents.","title":"backgroundColor()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.batch","text":"Runs the batch automation routine. Similar to the File > Automate > Batch command.","title":"batch()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.beep","text":"Causes a \"beep\" sound.","title":"beep()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.build","text":"","title":"build()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.changeProgressText","text":"Changes the text that appears in the progress window.","title":"changeProgressText()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.colorSettings","text":"The name of the current color settings. as selected with Edit > Color Settings.","title":"colorSettings()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.currentTool","text":"","title":"currentTool()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.displayDialogs","text":"The dialog mode for the document, which indicates whether or not Photoshop displays dialogs when the script runs.","title":"displayDialogs()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.doAction","text":"Plays the specified action from the Actions palette.","title":"doAction()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.doProgress","text":"Performs a task with a progress bar. Other progress APIs must be called periodically to update the progress bar and allow cancelling. Parameters: title ( str ) \u2013 String to show in the progress window. javascript ( str ) \u2013 JavaScriptString to execute.","title":"doProgress()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.doProgressTask","text":"Sections off a portion of the unused progress bar for execution of a subtask. Returns false on cancel.","title":"doProgressTask()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.documents","text":"._documents.Documents: The Documents instance.","title":"documents()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.eraseCustomOptions","text":"Removes the specified user objects from the Photoshop registry.","title":"eraseCustomOptions()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.featureEnabled","text":"Determines whether the feature specified by name is enabled. The following features are supported as values for name: \"photoshop/extended\" \"photoshop/standard\" \"photoshop/trial","title":"featureEnabled()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.foregroundColor","text":"Get default foreground color. Used to paint, fill, and stroke selections. Returns: SolidColor \u2013 The SolidColor instance.","title":"foregroundColor()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.freeMemory","text":"The amount of unused memory available to .","title":"freeMemory()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.getCustomOptions","text":"Retrieves user objects in the Photoshop registry for the ID with value key.","title":"getCustomOptions()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.load","text":"Loads a support document.","title":"load()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.locale","text":"The language locale of the application.","title":"locale()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.macintoshFileTypes","text":"A list of the image file types Photoshop can open.","title":"macintoshFileTypes()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.measurementLog","text":"The log of measurements taken.","title":"measurementLog()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.notifiers","text":"The notifiers currently configured (in the Scripts Events Manager menu in the application).","title":"notifiers()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.notifiersEnabled","text":"If true, notifiers are enabled.","title":"notifiersEnabled()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.parent","text":"The object\u2019s container.","title":"parent()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.path","text":"","title":"path()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.playbackParameters","text":"Stores and retrieves parameters used as part of a recorded action.","title":"playbackParameters()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.purge","text":"Purges one or more caches. Parameters: target \u2013 .e.g: 0: Clears all caches. 1: Clears the clipboard. 2: Deletes all history states from the History palette. 3: Clears the undo cache.","title":"purge()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.refresh","text":"Pauses the script while the application refreshes. Ues to slow down execution and show the results to the user as the script runs. Use carefully; your script runs much more slowly when using this method.","title":"refresh()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.refreshFonts","text":"Force the font list to get refreshed.","title":"refreshFonts()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.runMenuItem","text":"Run a menu item given the menu ID.","title":"runMenuItem()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.showColorPicker","text":"Returns false if dialog is cancelled, true otherwise.","title":"showColorPicker()"},{"location":"reference/photoshop/api/application/#photoshop.api.application.Application.togglePalettes","text":"Toggle palette visibility.","title":"togglePalettes()"},{"location":"reference/photoshop/api/batch_options/","text":"photoshop.api.batch_options BatchOptions () Bases: Photoshop destination () writable property The type of destination for the processed files. destinationFolder () writable property The folder location for the processed files. Valid only when \u2018destination\u2019 = folder. errorFile () writable property The file in which to log errors encountered. To display errors on the screen and stop batch processing when errors occur, leave blank. fileNaming () writable property A list of file naming options. Maximum: 6. macintoshCompatible () writable property If true, the final file names are Macintosh compatible. overrideOpen () writable property If true, overrides action open commands. overrideSave () writable property If true, overrides save as action steps with the specified destination. startingSerial () writable property The starting serial number to use in naming files. suppressOpen () writable property If true, suppresses file open options dialogs. suppressProfile () writable property If true, suppresses color profile warnings. unixCompatible () writable property If true, the final file names are Unix compatible. windowsCompatible () writable property If true, the final file names are Windows compatible.","title":"batch_options"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options","text":"","title":"batch_options"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions","text":"Bases: Photoshop","title":"BatchOptions"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.destination","text":"The type of destination for the processed files.","title":"destination()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.destinationFolder","text":"The folder location for the processed files. Valid only when \u2018destination\u2019 = folder.","title":"destinationFolder()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.errorFile","text":"The file in which to log errors encountered. To display errors on the screen and stop batch processing when errors occur, leave blank.","title":"errorFile()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.fileNaming","text":"A list of file naming options. Maximum: 6.","title":"fileNaming()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.macintoshCompatible","text":"If true, the final file names are Macintosh compatible.","title":"macintoshCompatible()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.overrideOpen","text":"If true, overrides action open commands.","title":"overrideOpen()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.overrideSave","text":"If true, overrides save as action steps with the specified destination.","title":"overrideSave()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.startingSerial","text":"The starting serial number to use in naming files.","title":"startingSerial()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.suppressOpen","text":"If true, suppresses file open options dialogs.","title":"suppressOpen()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.suppressProfile","text":"If true, suppresses color profile warnings.","title":"suppressProfile()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.unixCompatible","text":"If true, the final file names are Unix compatible.","title":"unixCompatible()"},{"location":"reference/photoshop/api/batch_options/#photoshop.api.batch_options.BatchOptions.windowsCompatible","text":"If true, the final file names are Windows compatible.","title":"windowsCompatible()"},{"location":"reference/photoshop/api/constants/","text":"photoshop.api.constants","title":"constants"},{"location":"reference/photoshop/api/constants/#photoshop.api.constants","text":"","title":"constants"},{"location":"reference/photoshop/api/enumerations/","text":"photoshop.api.enumerations constants type of enum for Photoshop.","title":"enumerations"},{"location":"reference/photoshop/api/enumerations/#photoshop.api.enumerations","text":"constants type of enum for Photoshop.","title":"enumerations"},{"location":"reference/photoshop/api/errors/","text":"photoshop.api.errors","title":"errors"},{"location":"reference/photoshop/api/errors/#photoshop.api.errors","text":"","title":"errors"},{"location":"reference/photoshop/api/event_id/","text":"photoshop.api.event_id EventID Bases: str , Enum All event ids.","title":"event_id"},{"location":"reference/photoshop/api/event_id/#photoshop.api.event_id","text":"","title":"event_id"},{"location":"reference/photoshop/api/event_id/#photoshop.api.event_id.EventID","text":"Bases: str , Enum All event ids.","title":"EventID"},{"location":"reference/photoshop/api/solid_color/","text":"photoshop.api.solid_color A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() . SolidColor ( parent = None ) Bases: Photoshop A color definition used in the document. cmyk () writable property The CMYK color mode. Returns: CMYKColor \u2013 .colors.cmyk.CMYKColor: isEqual ( color ) SolidColor object is visually equal to the specified color. model () writable property The color model. nearestWebColor () property The nearest web color to the current color. rgb () writable property The RGB color mode.","title":"solid_color"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color","text":"A color definition used in the document. Maps a color to equivalents in all available color models. Used in Application.backgroundColor and foregroundColor properties, in Channel.color , in ColorSampler.color , and in TextItem.color Passed to PathItem.fillPath() , Selection.fill() , and Selection.stroke() .","title":"solid_color"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor","text":"Bases: Photoshop A color definition used in the document.","title":"SolidColor"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.cmyk","text":"The CMYK color mode. Returns: CMYKColor \u2013 .colors.cmyk.CMYKColor:","title":"cmyk()"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.isEqual","text":"SolidColor object is visually equal to the specified color.","title":"isEqual()"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.model","text":"The color model.","title":"model()"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.nearestWebColor","text":"The nearest web color to the current color.","title":"nearestWebColor()"},{"location":"reference/photoshop/api/solid_color/#photoshop.api.solid_color.SolidColor.rgb","text":"The RGB color mode.","title":"rgb()"},{"location":"reference/photoshop/api/text_font/","text":"photoshop.api.text_font TextFont ( parent = None ) Bases: Photoshop An installed font. family () property The font family name () property The name of the font. postScriptName () property The PostScript name of the font. style () property The font style.","title":"text_font"},{"location":"reference/photoshop/api/text_font/#photoshop.api.text_font","text":"","title":"text_font"},{"location":"reference/photoshop/api/text_font/#photoshop.api.text_font.TextFont","text":"Bases: Photoshop An installed font.","title":"TextFont"},{"location":"reference/photoshop/api/text_font/#photoshop.api.text_font.TextFont.family","text":"The font family","title":"family()"},{"location":"reference/photoshop/api/text_font/#photoshop.api.text_font.TextFont.name","text":"The name of the font.","title":"name()"},{"location":"reference/photoshop/api/text_font/#photoshop.api.text_font.TextFont.postScriptName","text":"The PostScript name of the font.","title":"postScriptName()"},{"location":"reference/photoshop/api/text_font/#photoshop.api.text_font.TextFont.style","text":"The font style.","title":"style()"},{"location":"reference/photoshop/api/text_item/","text":"photoshop.api.text_item TextItem ( parent ) Bases: Photoshop The text that is associated with the layer. Valid only when \u2018kind\u2019 is text layer. antiAliasMethod () writable property The method of anti aliasing to use. autoKerning () writable property The auto kerning option to use. baselineShift () writable property The unit value to use in the baseline offset of text. capitalization () writable property Gets text case. color () writable property The text color. contents () writable property The actual text in the layer. convertToShape () Converts the text item and its containing layer to a fill layer with the text changed to a clipping path. createPath () Creates a clipping path from the outlines of the actual text items (such as letters or words). desiredGlyphScaling () writable property The desired amount by which to scale the horizontal size of the text letters. A percentage value; at 100, the width of characters is not scaled. desiredLetterScaling () writable property The amount of space between letters . (at 0, no space is added between letters). Equivalent to Letter Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumLetterScaling and maximumLetterScaling values are also required. desiredWordScaling () writable property The amount (percentage) of space between words (at 100, no additional space is added between words). Equivalent to Word Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumWordScaling and maximumWordScaling values are also required direction () writable property The text orientation. fauxBold () writable property True to use faux bold (default: false). Setting this to true is equivalent to selecting text and clicking Faux Bold in the Character palette. fauxItalic () writable property True to use faux italic (default: false). Setting this to true is equivalent to selecting text and clicking Faux Italic in the Character palette. firstLineIndent () writable property The amount (unit value) to indent the first line of paragraphs. font () writable property .text_font.TextFont: Current font. hangingPunctuation () writable property True to use Roman hanging punctuation. height () writable property horizontalScale () writable property Character scaling (horizontal) in proportion to verticalScale (a percentage value). hyphenateAfterFirst () writable property The number of letters after which hyphenation in word wrap is allowed. hyphenateBeforeLast () writable property The number of letters before which hyphenation in word wrap is allowed. hyphenateCapitalWords () writable property True to allow hyphenation in word wrap of capitalized words hyphenateWordsLongerThan () writable property The minimum number of letters a word must have in order for hyphenation in word wrap to be allowed. hyphenation () writable property True to use hyphenation in word wrap. hyphenationZone () writable property The distance at the end of a line that will cause a word to break in unjustified type. justification () writable property The paragraph justification. leftIndent () writable property The amoun of space to indent text from the left. ligatures () writable property True to use ligatures. maximumGlyphScaling () writable property The maximum amount to scale the horizontal size of the text letters (a percentage value; at 100, the width of characters is not scaled). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumGlyphScaling and desiredGlyphScaling values are also required. maximumLetterScaling () writable property The maximum amount of space to allow between letters (at 0, no space is added between letters). Equivalent to Letter Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumLetterScaling and desiredLetterScaling values are also required. minimumGlyphScaling () writable property The minimum amount to scale the horizontal size of the text letters (a percentage value; at 100, the width of characters is not scaled). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the maximumGlyphScaling and desiredGlyphScaling values are also required. minimumLetterScaling () writable property The minimum amount of space to allow between letters (a percentage value; at 0, no space is removed between letters). Equivalent to Letter Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the maximumLetterScaling and desiredLetterScaling values are also required. minimumWordScaling () writable property The minimum amount of space to allow between words (a percentage value; at 100, no additional space is removed between words). Equivalent to Word Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the maximumWordScaling and desiredWordScaling values are also required. noBreak () writable property True to disallow line breaks in this text. Tip: When true for many consecutive characters, can prevent word wrap and thus may prevent some text from appearing on the screen. size () writable property The font size in UnitValue. NOTE: Type was points for CS3 and older. spaceAfter () writable property The amount of space to use after each paragraph. strikeThru () writable property The text strike-through option to use. underline () writable property The text underlining options. warpBend () writable property The warp bend percentage. warpDirection () writable property The warp direction. warpStyle () writable property The style of warp to use. width () writable property The width of the bounding box for paragraph text. Valid only when kind = TextType.PARAGRAPHTEXT.","title":"text_item"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item","text":"","title":"text_item"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem","text":"Bases: Photoshop The text that is associated with the layer. Valid only when \u2018kind\u2019 is text layer.","title":"TextItem"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.antiAliasMethod","text":"The method of anti aliasing to use.","title":"antiAliasMethod()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.autoKerning","text":"The auto kerning option to use.","title":"autoKerning()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.baselineShift","text":"The unit value to use in the baseline offset of text.","title":"baselineShift()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.capitalization","text":"Gets text case.","title":"capitalization()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.color","text":"The text color.","title":"color()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.contents","text":"The actual text in the layer.","title":"contents()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.convertToShape","text":"Converts the text item and its containing layer to a fill layer with the text changed to a clipping path.","title":"convertToShape()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.createPath","text":"Creates a clipping path from the outlines of the actual text items (such as letters or words).","title":"createPath()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.desiredGlyphScaling","text":"The desired amount by which to scale the horizontal size of the text letters. A percentage value; at 100, the width of characters is not scaled.","title":"desiredGlyphScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.desiredLetterScaling","text":"The amount of space between letters . (at 0, no space is added between letters). Equivalent to Letter Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumLetterScaling and maximumLetterScaling values are also required.","title":"desiredLetterScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.desiredWordScaling","text":"The amount (percentage) of space between words (at 100, no additional space is added between words). Equivalent to Word Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumWordScaling and maximumWordScaling values are also required","title":"desiredWordScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.direction","text":"The text orientation.","title":"direction()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.fauxBold","text":"True to use faux bold (default: false). Setting this to true is equivalent to selecting text and clicking Faux Bold in the Character palette.","title":"fauxBold()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.fauxItalic","text":"True to use faux italic (default: false). Setting this to true is equivalent to selecting text and clicking Faux Italic in the Character palette.","title":"fauxItalic()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.firstLineIndent","text":"The amount (unit value) to indent the first line of paragraphs.","title":"firstLineIndent()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.font","text":".text_font.TextFont: Current font.","title":"font()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hangingPunctuation","text":"True to use Roman hanging punctuation.","title":"hangingPunctuation()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.height","text":"","title":"height()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.horizontalScale","text":"Character scaling (horizontal) in proportion to verticalScale (a percentage value).","title":"horizontalScale()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hyphenateAfterFirst","text":"The number of letters after which hyphenation in word wrap is allowed.","title":"hyphenateAfterFirst()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hyphenateBeforeLast","text":"The number of letters before which hyphenation in word wrap is allowed.","title":"hyphenateBeforeLast()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hyphenateCapitalWords","text":"True to allow hyphenation in word wrap of capitalized words","title":"hyphenateCapitalWords()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hyphenateWordsLongerThan","text":"The minimum number of letters a word must have in order for hyphenation in word wrap to be allowed.","title":"hyphenateWordsLongerThan()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hyphenation","text":"True to use hyphenation in word wrap.","title":"hyphenation()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.hyphenationZone","text":"The distance at the end of a line that will cause a word to break in unjustified type.","title":"hyphenationZone()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.justification","text":"The paragraph justification.","title":"justification()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.leftIndent","text":"The amoun of space to indent text from the left.","title":"leftIndent()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.ligatures","text":"True to use ligatures.","title":"ligatures()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.maximumGlyphScaling","text":"The maximum amount to scale the horizontal size of the text letters (a percentage value; at 100, the width of characters is not scaled). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumGlyphScaling and desiredGlyphScaling values are also required.","title":"maximumGlyphScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.maximumLetterScaling","text":"The maximum amount of space to allow between letters (at 0, no space is added between letters). Equivalent to Letter Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the minimumLetterScaling and desiredLetterScaling values are also required.","title":"maximumLetterScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.minimumGlyphScaling","text":"The minimum amount to scale the horizontal size of the text letters (a percentage value; at 100, the width of characters is not scaled). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the maximumGlyphScaling and desiredGlyphScaling values are also required.","title":"minimumGlyphScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.minimumLetterScaling","text":"The minimum amount of space to allow between letters (a percentage value; at 0, no space is removed between letters). Equivalent to Letter Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the maximumLetterScaling and desiredLetterScaling values are also required.","title":"minimumLetterScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.minimumWordScaling","text":"The minimum amount of space to allow between words (a percentage value; at 100, no additional space is removed between words). Equivalent to Word Spacing in the Justification dialog (Select Justification on the Paragraphs palette menu). Valid only when justification = Justification.CENTERJUSTIFIED, FULLYJUSTIFIED, LEFTJUSTIFIED, or Justification.RIGHTJUSTIFIED. When used, the maximumWordScaling and desiredWordScaling values are also required.","title":"minimumWordScaling()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.noBreak","text":"True to disallow line breaks in this text. Tip: When true for many consecutive characters, can prevent word wrap and thus may prevent some text from appearing on the screen.","title":"noBreak()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.size","text":"The font size in UnitValue. NOTE: Type was points for CS3 and older.","title":"size()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.spaceAfter","text":"The amount of space to use after each paragraph.","title":"spaceAfter()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.strikeThru","text":"The text strike-through option to use.","title":"strikeThru()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.underline","text":"The text underlining options.","title":"underline()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.warpBend","text":"The warp bend percentage.","title":"warpBend()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.warpDirection","text":"The warp direction.","title":"warpDirection()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.warpStyle","text":"The style of warp to use.","title":"warpStyle()"},{"location":"reference/photoshop/api/text_item/#photoshop.api.text_item.TextItem.width","text":"The width of the bounding box for paragraph text. Valid only when kind = TextType.PARAGRAPHTEXT.","title":"width()"},{"location":"reference/photoshop/api/colors/cmyk/","text":"photoshop.api.colors.cmyk Defines a CMYK color, used in the SolidColor object. CMYKColor ( parent ) Bases: Photoshop A CMYK color specification. black () writable property The black color value. Range: 0.0 to 100.0. cyan () writable property The cyan color value. Range: 0.0 to 100.0. magenta () writable property The magenta color value. Range: 0.0 to 100.0. yellow () writable property The yellow color value. Range: 0.0 to 100.0.","title":"cmyk"},{"location":"reference/photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk","text":"Defines a CMYK color, used in the SolidColor object.","title":"cmyk"},{"location":"reference/photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk.CMYKColor","text":"Bases: Photoshop A CMYK color specification.","title":"CMYKColor"},{"location":"reference/photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk.CMYKColor.black","text":"The black color value. Range: 0.0 to 100.0.","title":"black()"},{"location":"reference/photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk.CMYKColor.cyan","text":"The cyan color value. Range: 0.0 to 100.0.","title":"cyan()"},{"location":"reference/photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk.CMYKColor.magenta","text":"The magenta color value. Range: 0.0 to 100.0.","title":"magenta()"},{"location":"reference/photoshop/api/colors/cmyk/#photoshop.api.colors.cmyk.CMYKColor.yellow","text":"The yellow color value. Range: 0.0 to 100.0.","title":"yellow()"},{"location":"reference/photoshop/api/colors/gray/","text":"photoshop.api.colors.gray Defines a gray color, used in the SolidColor object. GrayColor ( parent ) Bases: Photoshop Options for defining a gray color. gray () writable property The gray value.","title":"gray"},{"location":"reference/photoshop/api/colors/gray/#photoshop.api.colors.gray","text":"Defines a gray color, used in the SolidColor object.","title":"gray"},{"location":"reference/photoshop/api/colors/gray/#photoshop.api.colors.gray.GrayColor","text":"Bases: Photoshop Options for defining a gray color.","title":"GrayColor"},{"location":"reference/photoshop/api/colors/gray/#photoshop.api.colors.gray.GrayColor.gray","text":"The gray value.","title":"gray()"},{"location":"reference/photoshop/api/colors/hsb/","text":"photoshop.api.colors.hsb Defines an HSB color, used in the SolidColor object. HSBColor ( parent ) Bases: Photoshop An HSB color specification. hue () writable property The hue value. Range: 0.0 to 360.0.","title":"hsb"},{"location":"reference/photoshop/api/colors/hsb/#photoshop.api.colors.hsb","text":"Defines an HSB color, used in the SolidColor object.","title":"hsb"},{"location":"reference/photoshop/api/colors/hsb/#photoshop.api.colors.hsb.HSBColor","text":"Bases: Photoshop An HSB color specification.","title":"HSBColor"},{"location":"reference/photoshop/api/colors/hsb/#photoshop.api.colors.hsb.HSBColor.hue","text":"The hue value. Range: 0.0 to 360.0.","title":"hue()"},{"location":"reference/photoshop/api/colors/lab/","text":"photoshop.api.colors.lab LabColor ( parent ) Bases: Photoshop A Lab color specification.","title":"lab"},{"location":"reference/photoshop/api/colors/lab/#photoshop.api.colors.lab","text":"","title":"lab"},{"location":"reference/photoshop/api/colors/lab/#photoshop.api.colors.lab.LabColor","text":"Bases: Photoshop A Lab color specification.","title":"LabColor"},{"location":"reference/photoshop/api/colors/rgb/","text":"photoshop.api.colors.rgb RGBColor ( parent ) Bases: Photoshop The definition of an RGB color mode.","title":"rgb"},{"location":"reference/photoshop/api/colors/rgb/#photoshop.api.colors.rgb","text":"","title":"rgb"},{"location":"reference/photoshop/api/colors/rgb/#photoshop.api.colors.rgb.RGBColor","text":"Bases: Photoshop The definition of an RGB color mode.","title":"RGBColor"},{"location":"reference/photoshop/api/open_options/eps/","text":"photoshop.api.open_options.eps EPSOpenOptions () Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"eps"},{"location":"reference/photoshop/api/open_options/eps/#photoshop.api.open_options.eps","text":"","title":"eps"},{"location":"reference/photoshop/api/open_options/eps/#photoshop.api.open_options.eps.EPSOpenOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSOpenOptions"},{"location":"reference/photoshop/api/save_options/bmp/","text":"photoshop.api.save_options.bmp Options for saving a document in BMO format. BMPSaveOptions () Bases: Photoshop Options for saving a document in BMP format. alphaChannels () writable property State to save the alpha channels.","title":"bmp"},{"location":"reference/photoshop/api/save_options/bmp/#photoshop.api.save_options.bmp","text":"Options for saving a document in BMO format.","title":"bmp"},{"location":"reference/photoshop/api/save_options/bmp/#photoshop.api.save_options.bmp.BMPSaveOptions","text":"Bases: Photoshop Options for saving a document in BMP format.","title":"BMPSaveOptions"},{"location":"reference/photoshop/api/save_options/bmp/#photoshop.api.save_options.bmp.BMPSaveOptions.alphaChannels","text":"State to save the alpha channels.","title":"alphaChannels()"},{"location":"reference/photoshop/api/save_options/eps/","text":"photoshop.api.save_options.eps EPSSaveOptions () Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs() embedColorProfile () writable property True to embed the color profile in this document. transparentWhites () writable property True to display white areas as transparent vectorData () writable property True to include vector data.","title":"eps"},{"location":"reference/photoshop/api/save_options/eps/#photoshop.api.save_options.eps","text":"","title":"eps"},{"location":"reference/photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions","text":"Bases: Photoshop Options for saving a document in EPS format. using the Document.saveAs()","title":"EPSSaveOptions"},{"location":"reference/photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions.embedColorProfile","text":"True to embed the color profile in this document.","title":"embedColorProfile()"},{"location":"reference/photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions.transparentWhites","text":"True to display white areas as transparent","title":"transparentWhites()"},{"location":"reference/photoshop/api/save_options/eps/#photoshop.api.save_options.eps.EPSSaveOptions.vectorData","text":"True to include vector data.","title":"vectorData()"},{"location":"reference/photoshop/api/save_options/gif/","text":"photoshop.api.save_options.gif GIFSaveOptions () Bases: Photoshop Options for saving a document in GIF format.","title":"gif"},{"location":"reference/photoshop/api/save_options/gif/#photoshop.api.save_options.gif","text":"","title":"gif"},{"location":"reference/photoshop/api/save_options/gif/#photoshop.api.save_options.gif.GIFSaveOptions","text":"Bases: Photoshop Options for saving a document in GIF format.","title":"GIFSaveOptions"},{"location":"reference/photoshop/api/save_options/jpg/","text":"photoshop.api.save_options.jpg JPEGSaveOptions ( quality = 5 , embedColorProfile = True , matte = MatteType . NoMatte ) Bases: Photoshop Options for saving a document in JPEG format. formatOptions () writable property The download format to use. matte () writable property The color to use to fill anti-aliased edges adjacent to transparent","title":"jpg"},{"location":"reference/photoshop/api/save_options/jpg/#photoshop.api.save_options.jpg","text":"","title":"jpg"},{"location":"reference/photoshop/api/save_options/jpg/#photoshop.api.save_options.jpg.JPEGSaveOptions","text":"Bases: Photoshop Options for saving a document in JPEG format.","title":"JPEGSaveOptions"},{"location":"reference/photoshop/api/save_options/jpg/#photoshop.api.save_options.jpg.JPEGSaveOptions.formatOptions","text":"The download format to use.","title":"formatOptions()"},{"location":"reference/photoshop/api/save_options/jpg/#photoshop.api.save_options.jpg.JPEGSaveOptions.matte","text":"The color to use to fill anti-aliased edges adjacent to transparent","title":"matte()"},{"location":"reference/photoshop/api/save_options/pdf/","text":"photoshop.api.save_options.pdf Options for saving a document in Adobe PDF format. using the Document.saveAs() method. PDFSaveOptions ( ** kwargs ) Bases: Photoshop Options for saving a document in PDF format. alphaChannels () writable property True to save the alpha channels with the file. annotations () writable property If true, the annotations are saved. colorConversion () writable property If true, converts the color profile to the destination profile. convertToEightBit () writable property If true, converts a 16-bit image to 8-bit for better compatibility with other applications. description () writable property Description of the save options in use. destinationProfile () writable property Describes the final RGB or CMYK output device, such as a monitor or press standard. downSample () writable property The downsample method to use. downSampleSize () writable property The size (in pixels per inch) to downsample images to if they exceed the value specified for down sample size limit. downSampleSizeLimit () writable property Limits downsampling or subsampling to images that exceed this value (in pixels per inch). embedColorProfile () writable property If true, the color profile is embedded in the document. embedThumbnail () writable property If true, includes a small preview image in Acrobat. encoding () writable property The encoding method to use. jpegQuality () writable property Get the quality of the produced image. layers () writable property If true, the layers are saved. optimizeForWeb () writable property If true, improves performance of PDFs on Web servers. outputCondition () writable property An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file. outputConditionID () writable property The identifier for the output condition. preserveEditing () writable property If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact. presetFile () writable property The preset file to use for settings; overrides other settings. profileInclusionPolicy () writable property If true, shows which profiles to include. registryName () writable property The URL where the output condition is registered. spotColors () writable property If true, the spot colors are saved. tileSize () writable property The compression option. Valid only when encoding is JPEG2000. view () writable property If true, opens the saved PDF in Acrobat.","title":"pdf"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf","text":"Options for saving a document in Adobe PDF format. using the Document.saveAs() method.","title":"pdf"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions","text":"Bases: Photoshop Options for saving a document in PDF format.","title":"PDFSaveOptions"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.alphaChannels","text":"True to save the alpha channels with the file.","title":"alphaChannels()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.colorConversion","text":"If true, converts the color profile to the destination profile.","title":"colorConversion()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.convertToEightBit","text":"If true, converts a 16-bit image to 8-bit for better compatibility with other applications.","title":"convertToEightBit()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.description","text":"Description of the save options in use.","title":"description()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.destinationProfile","text":"Describes the final RGB or CMYK output device, such as a monitor or press standard.","title":"destinationProfile()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.downSample","text":"The downsample method to use.","title":"downSample()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSize","text":"The size (in pixels per inch) to downsample images to if they exceed the value specified for down sample size limit.","title":"downSampleSize()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.downSampleSizeLimit","text":"Limits downsampling or subsampling to images that exceed this value (in pixels per inch).","title":"downSampleSizeLimit()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.embedThumbnail","text":"If true, includes a small preview image in Acrobat.","title":"embedThumbnail()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.encoding","text":"The encoding method to use.","title":"encoding()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.jpegQuality","text":"Get the quality of the produced image.","title":"jpegQuality()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.optimizeForWeb","text":"If true, improves performance of PDFs on Web servers.","title":"optimizeForWeb()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.outputCondition","text":"An optional comment field for inserting descriptions of the output condition. The text is stored in the PDF/X file.","title":"outputCondition()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.outputConditionID","text":"The identifier for the output condition.","title":"outputConditionID()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.preserveEditing","text":"If true, allows users to reopen the PDF in Photoshop with native Photoshop data intact.","title":"preserveEditing()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.presetFile","text":"The preset file to use for settings; overrides other settings.","title":"presetFile()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.profileInclusionPolicy","text":"If true, shows which profiles to include.","title":"profileInclusionPolicy()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.registryName","text":"The URL where the output condition is registered.","title":"registryName()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.spotColors","text":"If true, the spot colors are saved.","title":"spotColors()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.tileSize","text":"The compression option. Valid only when encoding is JPEG2000.","title":"tileSize()"},{"location":"reference/photoshop/api/save_options/pdf/#photoshop.api.save_options.pdf.PDFSaveOptions.view","text":"If true, opens the saved PDF in Acrobat.","title":"view()"},{"location":"reference/photoshop/api/save_options/png/","text":"photoshop.api.save_options.png ExportOptionsSaveForWeb () Bases: Photoshop Options for exporting Save For Web files. PNG8 () writable property If true, uses 8 bits. If false, uses 24 bits. Valid only when \u2018format\u2019 = PNG. blur () writable property Applies blur to the image to reduce artifacts. colorReduction () writable property The color reduction algorithm. colors () writable property The number of colors in the palette. dither () writable property The type of dither to use. quality () writable property The quality of the output image, from 0 to 100. PNGSaveOptions ( interlaced = False , compression = 6 ) Bases: Photoshop Options for saving file as PNG.","title":"png"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png","text":"","title":"png"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb","text":"Bases: Photoshop Options for exporting Save For Web files.","title":"ExportOptionsSaveForWeb"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.PNG8","text":"If true, uses 8 bits. If false, uses 24 bits. Valid only when \u2018format\u2019 = PNG.","title":"PNG8()"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.blur","text":"Applies blur to the image to reduce artifacts.","title":"blur()"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colorReduction","text":"The color reduction algorithm.","title":"colorReduction()"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.colors","text":"The number of colors in the palette.","title":"colors()"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.dither","text":"The type of dither to use.","title":"dither()"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.ExportOptionsSaveForWeb.quality","text":"The quality of the output image, from 0 to 100.","title":"quality()"},{"location":"reference/photoshop/api/save_options/png/#photoshop.api.save_options.png.PNGSaveOptions","text":"Bases: Photoshop Options for saving file as PNG.","title":"PNGSaveOptions"},{"location":"reference/photoshop/api/save_options/psd/","text":"photoshop.api.save_options.psd PhotoshopSaveOptions Bases: Photoshop Options for saving a Photoshop document. alphaChannels () writable property If true, the alpha channels are saved. annotations () writable property If true, the annotations are saved. embedColorProfile () writable property If true, the color profile is embedded in the document. layers () writable property If true, the layers are saved. spotColors () writable property If true, spot colors are saved.","title":"psd"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd","text":"","title":"psd"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd.PhotoshopSaveOptions","text":"Bases: Photoshop Options for saving a Photoshop document.","title":"PhotoshopSaveOptions"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd.PhotoshopSaveOptions.alphaChannels","text":"If true, the alpha channels are saved.","title":"alphaChannels()"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd.PhotoshopSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd.PhotoshopSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd.PhotoshopSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"reference/photoshop/api/save_options/psd/#photoshop.api.save_options.psd.PhotoshopSaveOptions.spotColors","text":"If true, spot colors are saved.","title":"spotColors()"},{"location":"reference/photoshop/api/save_options/tag/","text":"photoshop.api.save_options.tag TargaSaveOptions Bases: Photoshop Options for saving a document in TGA (Targa) format. alphaChannels () writable property If true, the alpha channels are saved.","title":"tag"},{"location":"reference/photoshop/api/save_options/tag/#photoshop.api.save_options.tag","text":"","title":"tag"},{"location":"reference/photoshop/api/save_options/tag/#photoshop.api.save_options.tag.TargaSaveOptions","text":"Bases: Photoshop Options for saving a document in TGA (Targa) format.","title":"TargaSaveOptions"},{"location":"reference/photoshop/api/save_options/tag/#photoshop.api.save_options.tag.TargaSaveOptions.alphaChannels","text":"If true, the alpha channels are saved.","title":"alphaChannels()"},{"location":"reference/photoshop/api/save_options/tif/","text":"photoshop.api.save_options.tif TiffSaveOptions Bases: Photoshop Options for saving a document in TIFF format. alphaChannels () writable property If true, the alpha channels are saved. annotations () writable property If true, the annotations are saved. byteOrder () writable property The order in which the bytes will be read. Default: Mac OS when running in Mac OS, and IBM PC when running in Windows. embedColorProfile () writable property If true, the color profile is embedded in the document. imageCompression () writable property The compression type. interleaveChannels () writable property If true, the channels in the image are interleaved. jpegQuality () writable property The quality of the produced image, which is inversely proportionate to the amount of JPEG compression. Valid only for JPEG compressed TIFF documents. Range: 0 to 12. layers () writable property If true, the layers are saved. saveImagePyramid () writable property If true, preserves multi-resolution information. spotColors () writable property If true, spot colors are saved.","title":"tif"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif","text":"","title":"tif"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions","text":"Bases: Photoshop Options for saving a document in TIFF format.","title":"TiffSaveOptions"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.alphaChannels","text":"If true, the alpha channels are saved.","title":"alphaChannels()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.annotations","text":"If true, the annotations are saved.","title":"annotations()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.byteOrder","text":"The order in which the bytes will be read. Default: Mac OS when running in Mac OS, and IBM PC when running in Windows.","title":"byteOrder()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.embedColorProfile","text":"If true, the color profile is embedded in the document.","title":"embedColorProfile()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.imageCompression","text":"The compression type.","title":"imageCompression()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.interleaveChannels","text":"If true, the channels in the image are interleaved.","title":"interleaveChannels()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.jpegQuality","text":"The quality of the produced image, which is inversely proportionate to the amount of JPEG compression. Valid only for JPEG compressed TIFF documents. Range: 0 to 12.","title":"jpegQuality()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.layers","text":"If true, the layers are saved.","title":"layers()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.saveImagePyramid","text":"If true, preserves multi-resolution information.","title":"saveImagePyramid()"},{"location":"reference/photoshop/api/save_options/tif/#photoshop.api.save_options.tif.TiffSaveOptions.spotColors","text":"If true, spot colors are saved.","title":"spotColors()"}]}